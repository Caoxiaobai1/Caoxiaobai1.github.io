[{"title":"深夜随笔","url":"/2025/09/05/深夜随笔/","content":"\n测试文档1","tags":["随笔"],"categories":["深夜随笔"]},{"title":"资料分析","url":"/2025/09/05/资料分析/","content":"\n# 第一章　实用速算技巧\n\n## 1.1　加法技巧--尾数法、高位叠加法\n\n**1.1.1**　**尾数法**\n\n在多个数字精确求和或求差时，从“尾数”处入手，为保证精确与速度，一般可观察两位。\n\n![image-20250905104917650](资料分析/image-20250905104917650.png)\n\n**【例1】**\n\n求出2014～2017年全国残疾人康复机构数量之和：\n\nA．29576               B．30217\n\nC．33418               D．36439\n\n**【例2】（2019年安徽特岗）**\n\n2011年，商标局共受理商标注册申请1416785件，同比增长32.1%，再创历史新高，连续十年位居世界第一。其中商标注册网上申请达804926件。\n\n外国来华申请量（包括马德里商标国际注册领土延伸申请）排名前10位的国家或地区分别是美国、日本、韩国、英国、德国、英属维尔京群岛、法国、意大利、瑞士、澳大利亚，申请量分别为26060件、19715件、6318件、5588件、3796件、3461件、3243件、2865件、2124件、2085件，这10个国家或地区的申请量之和占外国在华申请总数的78.5%。\n\n问题：2011年，外国来华商标申请量排名前10位的国家或地区的申请量之和为：\n\nA．75255件              B．75525件\n\nC．76215件              D．79585件\n\n**1.1.2**　**高位叠加**\n\n和我们记忆中的列竖式做加法顺序正相反，高位叠加是从高位加起，抓住问题的主要矛盾。非精确求和或没有选项可以参考时，可以选用高位叠加法。\n\n![image-20250905112551987](资料分析/image-20250905112551987.png)\n\n**图　2014～2021年全国零售药店终端药品销售额和同比增速**\n\n**【例1】**\n\n求出十三五时期全国零售药店终端药品销售额：\n\n**【例2】（2025年湖北选调）**\n\n![image-20250905112642137](资料分析/image-20250905112642137.png)\n\n**图　2023年11月～2024年11月证券期货经营机构资管产品月度备案数量及规模趋势**\n\n问题：2024年上半年，证券期货经营机构共备案私募资管产品:\n\nA．不到4400支            \t  B．4400～4500支之间\n\nC．4500～4600支之间          D．超过4600支\n\n\n\n## 1.2　减法技巧--分段法\n\n将多位数（三位、四位）的减法分成两段，尽可能保证不用借位；若无法保证不借位，可以用负数代替借位。\n\n**【例题】**\n\n512－481          532－328                721－688\n\n745－372          938－776                822－484\n\n1723－494         245－177                622－478\n\n\n\n **【例1】（2023年国考）**\n\n**表　2021年2～12月各月末固定互联网宽带接入用户数**\n\n| 万户     |                  |          |                             |       |\n| -------- | ---------------- | -------- | --------------------------- | ----- |\n|          |                  |          |                             |       |\n| 接入用户 | 其中：  xDSL用户 | 光纤用户 | 其中：  100Mbps速率以上用户 |       |\n| 2月      | 49222            | 296      | 46274                       | 44516 |\n| 3月      | 49726            | 295      | 46707                       | 45072 |\n| 4月      | 50061            | 293      | 47053                       | 45517 |\n| 5月      | 50516            | 292      | 47515                       | 46104 |\n| 6月      | 50961            | 290      | 47968                       | 46649 |\n| 7月      | 51374            | 290      | 48416                       | 47173 |\n| 8月      | 51865            | 290      | 48921                       | 47710 |\n| 9月      | 52629            | 291      | 49643                       | 48450 |\n| 10月     | 53146            | 290      | 50077                       | 49026 |\n| 11月     | 53540            | 288      | 50466                       | 49557 |\n| 12月     | 53579            | 283      | 50551                       | 49848 |\n\n问题：2021年下半年，我国固定互联网宽带接入用户中，光纤用户数增量超过500万户的月份有几个：\n\nA．2                 B．3\n\nC．4                 D．5\n\n**【例2】（2022年联考）**\n\n**表　2011～2020年全国城市生活垃圾无害化处理状况**\n\n|        | 总清运量  （万吨） | 无害化处理场  （座） | 无害化处理能力  （万吨/日） | 无害化处理量  （万吨） |\n| ------ | ------------------ | -------------------- | --------------------------- | ---------------------- |\n| 2011年 | 16395              | 677                  | 40.91                       | 13090                  |\n| 2012年 | 17081              | 701                  | 44.63                       | 14490                  |\n| 2013年 | 17239              | 765                  | 49.23                       | 15394                  |\n| 2014年 | 17860              | 818                  | 53.35                       | 16394                  |\n| 2015年 | 19142              | 890                  | 57.69                       | 18013                  |\n| 2016年 | 20362              | 940                  | 62.14                       | 19674                  |\n| 2017年 | 21521              | 1013                 | 67.99                       | 21034                  |\n| 2018年 | 22802              | 1091                 | 76.62                       | 22565                  |\n| 2019年 | 24206              | 1183                 | 86.99                       | 24013                  |\n| 2020年 | 23512              | 1287                 | 96.35                       | 23452                  |\n\n问题：2012～2020年间，全国城市生活垃圾无害化处理量同比增长超过1200万吨的年份有几个：\n\nA．4                 B．5\n\nC．6                 D．7\n\n\n\n## 1.3　乘法技巧--小分互换法、拆分法、放缩法\n\n**1.3.1**　**小分互换**\n\n若乘法中有某个乘数可以近似的转化为某个常见分数，我们可以将多位数乘法转化为简单除法计算;\n\n一个数字乘以5、25、125，可转化为除2、4、8.\n\n \n\n**需记忆的常用小数如下：**\n\n![image-20250905140708548](资料分析/image-20250905140708548.png)\n\n**【例题】**\n\n784×25%          632×12.5%                20%×455\n\n727×16.7%         981×33.3%                50%×472\n\n\n\n**1.3.2**　**乘法拆分**\n\n若乘法中有某个乘数为百分数且能拆成两个简单数值（50%、10%、5%等），我们可以将该百分数拆成两部分相乘，要擅用“1%”（“一个包子”）。\n\n**常用的小数拆分如下：**\n\n45%＝50%－5%\t55%＝50%＋5% \t15%＝10%＋5%  \n\n60%＝50%＋10% \t95%＝1－5% \t90%＝1－10%   \n\n及所有50%、100%附近的数等。\n\n \n\n**【例题】**\n\n382×55%          492×48%                936×45%\n\n592×97%          1228×95%                766×103%\n\n\n\n**【例1】**\n\n62851×97.2%＝？\n\nA．60671               B．61091\n\nC．61692               D．62052\n\n\n\n**【例2】**\n\n42815×93.1%＝？\n\nA．41481               B．40819\n\nC．39861               D．39012\n\n\n\n**【例3】（2023年青海）**\n\n![image-20250905140812804](资料分析/image-20250905140812804.png)\n\n**图1　中国母婴商品消费规模（单位：亿元）**\n\n![image-20250905140834424](资料分析/image-20250905140834424.png)\n\n问题：2021年，我国消费最多的母婴商品金额约为：\n\nA．9638亿元              B．8994亿元\n\nC．7852亿元              D．4186亿元\n\n\n\n**1.3.3**　**乘法放缩**\n\n若乘法中有某个乘数可以拆分为整百×（1![img](资料分析/clip_image002.gif)）时，可使用乘法结果放缩简化运算。\n\n \n\n**【例题】**\n\n212×332          315×571           428×325\n\n \n\n \n\n \n\n782×617           865×408           568×330\n\n \n\n \n\n \n\n \n\n \n\n \n\n## 1.4　除法技巧--拆分法、放缩法\n\n**1.4.1**　**拆分法**\n\n拆分法是对直除的“优化”，可借助选项“猜”出答案，**尤其适合分子位数小于等于分母的除法计算**。\n\n**拆分法具体应用：**\n\n一、如果分子在分母的50%附近，先拆出50%；\n\n二、如果分数大小约等于1（分子分母相差不大），可先拆出100%；\n\n三、如果分子很小，可根据实际情况拆出10%或5%或1%；\n\n**【例1】50%左右**\n\n250÷484          333÷642                488÷912\n\n \n\n \n\n \n\n143÷247          200÷384                121÷292\n\n \n\n \n\n \n\n**【例2】100%左右**\n\n450÷484          633÷642                888÷912\n\n \n\n \n\n \n\n252÷247          360÷344                261÷292\n\n \n\n \n\n \n\n**【例3】1%-20%左右**\n\n50÷484          33÷642                88÷912\n\n \n\n \n\n \n\n \n\n36÷242          30÷384                41÷292\n\n \n\n \n\n \n\n**【例4】实战演练**\n\n47598÷89894＝？\n\nA．54.9%             B．56.5%\n\nC．52.9%             D．51.2%\n\n \n\n \n\n \n\n43256÷357951＝？\n\nA．8.5%              B．10.9%\n\nC．12.1%             D．13.6%\n\n \n\n \n\n \n\n32503÷33546＝？\n\nA．94.1%             B．95.5%\n\nC．96.9%             D．98.5%\n\n \n\n \n\n \n\n**1.4.2**　**除法放缩**\n\n除法放缩的原理：分子分母同时扩大或缩小相同的幅度，分式不变。\n\n除法放缩的适用范围：\n\n①分母接近整百；\n\n②多个数乘除中分子分母接近整数倍。\n\n   \n\n**【例1】**\n$$\n\\frac{858}{981}\n$$\n![image-20250905143626366](资料分析/image-20250905143626366.png)\n\n![image-20250905143639900](资料分析/image-20250905143639900.png)\n\n \n\n \n\n \n\n \n","tags":["资料"],"categories":["公考"]},{"title":"测试文档1","url":"/2025/01/24/测试文档1/","content":"\n测试文档1\n\n","tags":["言语","推理","资料","常识","政治","数量","申论","claude","java"],"categories":["深夜随笔"]},{"title":"Claude Code官网教程","url":"/2025/01/24/Claude Code官网教程/","content":"\n# Claude Code官网教程\n\n# Claude Code 概述\n\n了解 Claude Code，Anthropic 的智能编程工具，它在您的终端中运行，帮助您比以往任何时候都更快地将想法转化为代码。\n\n## 30 秒快速开始\n\n前提条件：[**Node.js 18 或更新版本**](https://nodejs.org/en/download/)\n\n```shell\n# 安装 Claude Code\nnpm install -g @anthropic-ai/claude-code\n\n# 导航到您的项目\ncd your-awesome-project\n\n# 开始使用 Claude 编程\nclaude\n```\n\n## Claude Code 为您做什么\n\n*   从描述构建功能：用简单的英语告诉 Claude 您想要构建什么。它会制定计划、编写代码并确保其正常工作。\n    \n*   调试和修复问题：描述一个错误或粘贴错误消息。Claude Code 将分析您的代码库，识别问题并实施修复。\n    \n*   导航任何代码库：询问有关您团队代码库的任何问题，并获得深思熟虑的答案。Claude Code 保持对您整个项目结构的感知，可以从网络上找到最新信息，并且通过 MCP 可以从 Google Drive、Figma 和 Slack 等外部数据源获取信息。\n    \n*   自动化繁琐任务：修复复杂的 lint 问题、解决合并冲突并编写发布说明。在您的开发机器上通过单个命令完成所有这些，或在 CI 中自动完成。\n    \n\n## 为什么开发者喜爱 Claude Code\n\n*   在您的终端中工作：不是另一个聊天窗口。不是另一个 IDE。Claude Code 在您已经工作的地方与您相遇，使用您已经喜爱的工具。\n    \n*   采取行动：Claude Code 可以直接编辑文件、运行命令并创建提交。需要更多功能？MCP 让 Claude 读取您在 Google Drive 中的设计文档、更新您在 Jira 中的工单，或使用\\_您的\\_自定义开发工具。\n    \n*   Unix 哲学：Claude Code 是可组合和可脚本化的。tail -f app.log | claude -p \"如果您在此日志流中看到任何异常，请通过 Slack 通知我\" 有效。您的 CI 可以运行 claude -p \"如果有新的文本字符串，将它们翻译成法语并为 @lang-fr-team 提出 PR 进行审查\"。\n    \n*   企业就绪：使用 Anthropic 的 API，或在 AWS 或 GCP 上托管。企业级安全性、隐私和合规性是内置的。\n    \n\n# 快速开始\n\n欢迎使用 Claude Code！\n\n这个快速开始指南将让您在几分钟内使用AI驱动的编程辅助。完成后，您将了解如何使用 Claude Code 进行常见的开发任务。\n\n## 开始之前\n\n确保您已经：\n\n*   [**安装了 Claude Code**](https://docs.anthropic.com/zh-CN/docs/claude-code/setup)\n    \n*   打开了终端或命令提示符\n    \n*   有一个代码项目可以使用\n    \n\n## 步骤 1：开始您的第一个会话\n\n在任何项目目录中打开终端并启动 Claude Code：\n\n```bash\ncd /path/to/your/project\nclaude\n\n```\n\n您将在新的交互式会话中看到 Claude Code 提示符：\n\n```plaintext\n✻ Welcome to Claude Code!\n\n...\n\n> Try \"create a util logging.py that...\" \n\n```\n\n## 步骤 2：提出您的第一个问题\n\n让我们从了解您的代码库开始。尝试以下命令之一：\n\n```plaintext\n> what does this project do?\n\n```\n\nClaude 将分析您的文件并提供摘要。您也可以提出更具体的问题：\n\n```plaintext\n> what technologies does this project use?\n\n```\n```plaintext\n> where is the main entry point?\n\n```\n```plaintext\n> explain the folder structure\n\n```\n\nClaude Code 会根据需要读取您的文件 - 您不必手动添加上下文。\n\n## 步骤 3：进行您的第一次代码更改\n\n现在让我们让 Claude Code 做一些实际的编程工作。尝试一个简单的任务：\n\n```plaintext\n> add a hello world function to the main file\n\n```\n\nClaude Code 将：\n\n1.  找到合适的文件\n    \n2.  向您展示建议的更改\n    \n3.  请求您的批准\n    \n4.  进行编辑\n    \n\nClaude Code 在修改文件之前总是请求许可。您可以批准单个更改或为会话启用”全部接受”模式。\n\n## 步骤 4：将 Git 与 Claude Code 一起使用\n\nClaude Code 使 Git 操作变得对话化：\n\n```plaintext\n> what files have I changed?\n\n```\n```plaintext\n> commit my changes with a descriptive message\n\n```\n\n您也可以提示更复杂的 Git 操作：\n\n```plaintext\n> create a new branch called feature/quickstart\n\n```\n```plaintext\n> show me the last 5 commits\n\n```\n```plaintext\n> help me resolve merge conflicts\n\n```\n\n## 步骤 5：修复错误或添加功能\n\nClaude 擅长调试和功能实现。\n\n用自然语言描述您想要的：\n\n```plaintext\n> add input validation to the user registration form\n\n```\n\n或修复现有问题：\n\n```plaintext\n> there's a bug where users can submit empty forms - fix it\n\n```\n\nClaude Code 将：\n\n*   定位相关代码\n    \n*   理解上下文\n    \n*   实现解决方案\n    \n*   如果可用，运行测试\n    \n\n## 步骤 6：测试其他常见工作流程\n\n有多种方式与 Claude 协作：\n\n**重构代码**\n\n```plaintext\n> refactor the authentication module to use async/await instead of callbacks\n\n```\n\n**编写测试**\n\n```plaintext\n> write unit tests for the calculator functions\n\n```\n\n**更新文档**\n\n```plaintext\n> update the README with installation instructions\n\n```\n\n**代码审查**\n\n```plaintext\n> review my changes and suggest improvements\n\n```\n\n**记住**：Claude Code 是您的AI结对编程伙伴。像与有用的同事交谈一样与它交谈 - 描述您想要实现的目标，它将帮助您达到目标。\n\n## 基本命令\n\n以下是日常使用最重要的命令：\n\n| **命令** | **功能** | **示例** |\n| --- | --- | --- |\n| `claude` | 启动交互模式 | `claude` |\n| `claude \"task\"` | 运行一次性任务 | `claude \"fix the build error\"` |\n| `claude -p \"query\"` | 运行一次性查询，然后退出 | `claude -p \"explain this function\"` |\n| `claude -c` | 继续最近的对话 | `claude -c` |\n| `claude -r` | 恢复之前的对话 | `claude -r` |\n| `claude commit` | 创建 Git 提交 | `claude commit` |\n| `/clear` | 清除对话历史 | `> /clear` |\n| `/help` | 显示可用命令 | `> /help` |\n| `exit` 或 Ctrl+C | 退出 Claude Code | `> exit` |\n\n# 使用 CLAUDE CODE 构建\n\n# Claude Code SDK\n\n了解如何使用 Claude Code SDK 以编程方式将 Claude Code 集成到您的应用程序中。\n\nClaude Code SDK 支持将 Claude Code 作为子进程运行，提供了一种构建 AI 驱动的编码助手和工具的方法，利用 Claude 的能力。\n\nSDK 可用于命令行、TypeScript 和 Python 使用。\n\n## 身份验证\n\n要使用 Claude Code SDK，我们建议创建一个专用的 API 密钥：\n\n1.  在 [**Anthropic Console**](https://console.anthropic.com/) 中创建一个 Anthropic API 密钥\n    \n2.  然后，设置 `ANTHROPIC_API_KEY` 环境变量。我们建议安全地存储此密钥（例如，使用 Github [**secret**](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions)）\n    \n\n## 基本 SDK 使用\n\nClaude Code SDK 允许您在应用程序中以非交互模式使用 Claude Code。\n\n### 命令行\n\n以下是命令行 SDK 的一些基本示例：\n\n```bash\n# 运行单个提示并退出（打印模式）\n$ claude -p \"Write a function to calculate Fibonacci numbers\"\n\n# 使用管道提供 stdin\n$ echo \"Explain this code\" | claude -p\n\n# 以 JSON 格式输出并包含元数据\n$ claude -p \"Generate a hello world function\" --output-format json\n\n# 在到达时流式传输 JSON 输出\n$ claude -p \"Build a React component\" --output-format stream-json\n\n```\n\n### TypeScript\n\nTypeScript SDK 包含在 NPM 上的主要 [`**@anthropic-ai/claude-code**`](https://www.npmjs.com/package/@anthropic-ai/claude-code) 包中：\n\n```ts\nimport { query, type SDKMessage } from \"@anthropic-ai/claude-code\";\n\nconst messages: SDKMessage[] = [];\n\nfor await (const message of query({\n  prompt: \"Write a haiku about foo.py\",\n  abortController: new AbortController(),\n  options: {\n    maxTurns: 3,\n  },\n})) {\n  messages.push(message);\n}\n\nconsole.log(messages);\n\n```\n\nTypeScript SDK 接受命令行 SDK 支持的所有参数，以及：\n\n| **参数** | **描述** | **默认值** |\n| --- | --- | --- |\n| `abortController` | 中止控制器 | `new AbortController()` |\n| `cwd` | 当前工作目录 | `process.cwd()` |\n| `executable` | 要使用的 JavaScript 运行时 | 在 Node.js 中运行时为 `node`，在 Bun 中运行时为 `bun` |\n| `executableArgs` | 传递给可执行文件的参数 | `[]` |\n| `pathToClaudeCodeExecutable` | Claude Code 可执行文件的路径 | 与 `@anthropic-ai/claude-code` 一起提供的可执行文件 |\n\n### Python\n\nPython SDK 在 PyPI 上作为 [`**claude-code-sdk**`](https://github.com/anthropics/claude-code-sdk-python) 提供：\n\n```bash\npip install claude-code-sdk\n\n```\n\n**先决条件：**\n\n*   Python 3.10+\n    \n*   Node.js\n    \n*   Claude Code CLI：`npm install -g @anthropic-ai/claude-code`\n    \n\n基本使用：\n\n```python\nimport anyio\nfrom claude_code_sdk import query, ClaudeCodeOptions, Message\n\nasync def main():\n    messages: list[Message] = []\n    \n    async for message in query(\n        prompt=\"Write a haiku about foo.py\",\n        options=ClaudeCodeOptions(max_turns=3)\n    ):\n        messages.append(message)\n    \n    print(messages)\n\nanyio.run(main)\n\n```\n\nPython SDK 通过 `ClaudeCodeOptions` 类接受命令行 SDK 支持的所有参数：\n\n```python\nfrom claude_code_sdk import query, ClaudeCodeOptions\nfrom pathlib import Path\n\noptions = ClaudeCodeOptions(\n    max_turns=3,\n    system_prompt=\"You are a helpful assistant\",\n    cwd=Path(\"/path/to/project\"),  # 可以是字符串或 Path\n    allowed_tools=[\"Read\", \"Write\", \"Bash\"],\n    permission_mode=\"acceptEdits\"\n)\n\nasync for message in query(prompt=\"Hello\", options=options):\n    print(message)\n\n```\n\n## 高级使用\n\n下面的文档使用命令行 SDK 作为示例，但也可以与 TypeScript 和 Python SDK 一起使用。\n\n### 多轮对话\n\n对于多轮对话，您可以恢复对话或从最近的会话继续：\n\n```bash\n# 继续最近的对话\n$ claude --continue\n\n# 继续并提供新的提示\n$ claude --continue \"Now refactor this for better performance\"\n\n# 通过会话 ID 恢复特定对话\n$ claude --resume 550e8400-e29b-41d4-a716-446655440000\n\n# 在打印模式下恢复（非交互式）\n$ claude -p --resume 550e8400-e29b-41d4-a716-446655440000 \"Update the tests\"\n\n# 在打印模式下继续（非交互式）\n$ claude -p --continue \"Add error handling\"\n\n```\n\n### 自定义系统提示\n\n您可以提供自定义系统提示来指导 Claude 的行为：\n\n```bash\n# 覆盖系统提示（仅适用于 --print）\n$ claude -p \"Build a REST API\" --system-prompt \"You are a senior backend engineer. Focus on security, performance, and maintainability.\"\n\n# 具有特定要求的系统提示\n$ claude -p \"Create a database schema\" --system-prompt \"You are a database architect. Use PostgreSQL best practices and include proper indexing.\"\n\n```\n\n您还可以将指令附加到默认系统提示：\n\n```bash\n# 附加系统提示（仅适用于 --print）\n$ claude -p \"Build a REST API\" --append-system-prompt \"After writing code, be sure to code review yourself.\"\n\n```\n\n### MCP 配置\n\n模型上下文协议（MCP）允许您使用来自外部服务器的附加工具和资源扩展 Claude Code。使用 `--mcp-config` 标志，您可以加载提供专门功能的 MCP 服务器，如数据库访问、API 集成或自定义工具。\n\n创建一个包含您的 MCP 服务器的 JSON 配置文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/path/to/allowed/files\"\n      ]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your-github-token\"\n      }\n    }\n  }\n}\n\n```\n\n然后与 Claude Code 一起使用：\n\n```bash\n# 从配置加载 MCP 服务器\n$ claude -p \"List all files in the project\" --mcp-config mcp-servers.json\n\n# 重要：必须使用 --allowedTools 明确允许 MCP 工具\n# MCP 工具遵循格式：mcp__$serverName__$toolName\n$ claude -p \"Search for TODO comments\" \\\n  --mcp-config mcp-servers.json \\\n  --allowedTools \"mcp__filesystem__read_file,mcp__filesystem__list_directory\"\n\n# 使用 MCP 工具在非交互模式下处理权限提示\n$ claude -p \"Deploy the application\" \\\n  --mcp-config mcp-servers.json \\\n  --allowedTools \"mcp__permissions__approve\" \\\n  --permission-prompt-tool mcp__permissions__approve\n\n```\n\n使用 MCP 工具时，您必须使用 `--allowedTools` 标志明确允许它们。MCP 工具名称遵循模式 `mcp__<serverName>__<toolName>`，其中：\n\n*   `serverName` 是您的 MCP 配置文件中的键\n    \n*   `toolName` 是该服务器提供的特定工具\n    \n\n这种安全措施确保 MCP 工具仅在明确允许时使用。\n\n如果您只指定服务器名称（即 `mcp__<serverName>`），则该服务器的所有工具都将被允许。\n\n不支持通配符模式（例如 `mcp__go*`）。\n\n### 自定义权限提示工具\n\n可选地，使用 `--permission-prompt-tool` 传入一个 MCP 工具，我们将使用它来检查用户是否授予模型调用给定工具的权限。当模型调用工具时，会发生以下情况：\n\n1.  我们首先检查权限设置：所有 [**settings.json 文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings)，以及传递给 SDK 的 `--allowedTools` 和 `--disallowedTools`；如果其中之一允许或拒绝工具调用，我们继续进行工具调用\n    \n2.  否则，我们调用您在 `--permission-prompt-tool` 中提供的 MCP 工具\n    \n\n`--permission-prompt-tool` MCP 工具会传递工具名称和输入，并且必须返回一个带有结果的 JSON 字符串化载荷。载荷必须是以下之一：\n\n```ts\n// 工具调用被允许\n{\n  \"behavior\": \"allow\",\n  \"updatedInput\": {...}, // 更新的输入，或者只是返回原始输入\n}\n\n// 工具调用被拒绝\n{\n  \"behavior\": \"deny\",\n  \"message\": \"...\" // 解释为什么权限被拒绝的人类可读字符串\n}zai1\n\n```\n\n例如，TypeScript MCP 权限提示工具实现可能如下所示：\n\n```ts\nconst server = new McpServer({\n  name: \"Test permission prompt MCP Server\",\n  version: \"0.0.1\",\n});\n\nserver.tool(\n  \"approval_prompt\",\n  'Simulate a permission check - approve if the input contains \"allow\", otherwise deny',\n  {\n    tool_name: z.string().describe(\"The tool requesting permission\"),\n    input: z.object({}).passthrough().describe(\"The input for the tool\"),\n  },\n  async ({ tool_name, input }) => {\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: JSON.stringify(\n            JSON.stringify(input).includes(\"allow\")\n              ? {\n                  behavior: \"allow\",\n                  updatedInput: input,\n                }\n              : {\n                  behavior: \"deny\",\n                  message: \"Permission denied by test approval_prompt tool\",\n                }\n          ),\n        },\n      ],\n    };\n  }\n);\n\n```\n\n要使用此工具，添加您的 MCP 服务器（例如使用 `--mcp-config`），然后像这样调用 SDK：\n\n```sh\nclaude -p \"...\" \\\n  --permission-prompt-tool mcp__test-server__approval_prompt \\\n  --mcp-config my-config.json\n\n```\n\n使用说明：\n\n*   使用 `updatedInput` 告诉模型权限提示改变了其输入；否则，将 `updatedInput` 设置为原始输入，如上面的示例所示。例如，如果工具向用户显示文件编辑差异并让他们手动编辑差异，权限提示工具应该返回该更新的编辑。\n    \n*   载荷必须是 JSON 字符串化的\n    \n\n## 可用的 CLI 选项\n\nSDK 利用 Claude Code 中可用的所有 CLI 选项。以下是 SDK 使用的关键选项：\n\n| **标志** | **描述** | **示例** |\n| --- | --- | --- |\n| `--print`, `-p` | 在非交互模式下运行 | `claude -p \"query\"` |\n| `--output-format` | 指定输出格式（`text`、`json`、`stream-json`） | `claude -p --output-format json` |\n| `--resume`, `-r` | 通过会话 ID 恢复对话 | `claude --resume abc123` |\n| `--continue`, `-c` | 继续最近的对话 | `claude --continue` |\n| `--verbose` | 启用详细日志记录 | `claude --verbose` |\n| `--max-turns` | 在非交互模式下限制代理轮次 | `claude --max-turns 3` |\n| `--system-prompt` | 覆盖系统提示（仅适用于 `--print`） | `claude --system-prompt \"Custom instruction\"` |\n| `--append-system-prompt` | 附加到系统提示（仅适用于 `--print`） | `claude --append-system-prompt \"Custom instruction\"` |\n| `--allowedTools` | 允许的工具的空格分隔列表，或<br>允许的工具的逗号分隔列表字符串 | `claude --allowedTools mcp__slack mcp__filesystem`<br>`claude --allowedTools \"Bash(npm install),mcp__filesystem\"` |\n| `--disallowedTools` | 拒绝的工具的空格分隔列表，或<br>拒绝的工具的逗号分隔列表字符串 | `claude --disallowedTools mcp__splunk mcp__github`<br>`claude --disallowedTools \"Bash(git commit),mcp__github\"` |\n| `--mcp-config` | 从 JSON 文件加载 MCP 服务器 | `claude --mcp-config servers.json` |\n| `--permission-prompt-tool` | 用于处理权限提示的 MCP 工具（仅适用于 `--print`） | `claude --permission-prompt-tool mcp__auth__prompt` |\n\n有关 CLI 选项和功能的完整列表，请参阅 [**CLI 参考**](https://docs.anthropic.com/zh-CN/docs/claude-code/cli-reference) 文档。\n\n## 输出格式\n\nSDK 支持多种输出格式：\n\n### 文本输出（默认）\n\n仅返回响应文本：\n\n```bash\n$ claude -p \"Explain file src/components/Header.tsx\"\n# 输出：This is a React component showing...\n\n```\n\n### JSON 输出\n\n返回包括元数据的结构化数据：\n\n```bash\n$ claude -p \"How does the data layer work?\" --output-format json\n\n```\n\n响应格式：\n\n```json\n{\n  \"type\": \"result\",\n  \"subtype\": \"success\",\n  \"total_cost_usd\": 0.003,\n  \"is_error\": false,\n  \"duration_ms\": 1234,\n  \"duration_api_ms\": 800,\n  \"num_turns\": 6,\n  \"result\": \"The response text here...\",\n  \"session_id\": \"abc123\"\n}\n\n```\n\n### 流式 JSON 输出\n\n在接收到每条消息时流式传输：\n\n```bash\n$ claude -p \"Build an application\" --output-format stream-json\n\n```\n\n每个对话都以初始的 `init` 系统消息开始，然后是用户和助手消息列表，最后是带有统计信息的最终 `result` 系统消息。每条消息都作为单独的 JSON 对象发出。\n\n## 消息模式\n\n从 JSON API 返回的消息根据以下模式严格类型化：\n\n```ts\ntype SDKMessage =\n  // 助手消息\n  | {\n      type: \"assistant\";\n      message: Message; // 来自 Anthropic SDK\n      session_id: string;\n    }\n\n  // 用户消息\n  | {\n      type: \"user\";\n      message: MessageParam; // 来自 Anthropic SDK\n      session_id: string;\n    }\n\n  // 作为最后一条消息发出\n  | {\n      type: \"result\";\n      subtype: \"success\";\n      duration_ms: float;\n      duration_api_ms: float;\n      is_error: boolean;\n      num_turns: int;\n      result: string;\n      session_id: string;\n      total_cost_usd: float;\n    }\n\n  // 作为最后一条消息发出，当我们达到最大轮次时\n  | {\n      type: \"result\";\n      subtype: \"error_max_turns\" | \"error_during_execution\";\n      duration_ms: float;\n      duration_api_ms: float;\n      is_error: boolean;\n      num_turns: int;\n      session_id: string;\n      total_cost_usd: float;\n    }\n\n  // 在对话开始时作为第一条消息发出\n  | {\n      type: \"system\";\n      subtype: \"init\";\n      apiKeySource: string;\n      cwd: string;\n      session_id: string;\n      tools: string[];\n      mcp_servers: {\n        name: string;\n        status: string;\n      }[];\n      model: string;\n      permissionMode: \"default\" | \"acceptEdits\" | \"bypassPermissions\" | \"plan\";\n    };\n\n```\n\n我们将很快以 JSONSchema 兼容格式发布这些类型。我们对主要的 Claude Code 包使用语义版本控制来传达此格式的重大更改。\n\n`Message` 和 `MessageParam` 类型在 Anthropic SDK 中可用。例如，请参阅 Anthropic [**TypeScript**](https://github.com/anthropics/anthropic-sdk-typescript) 和 [**Python**](https://github.com/anthropics/anthropic-sdk-python/) SDK。\n\n## 输入格式\n\nSDK 支持多种输入格式：\n\n### 文本输入（默认）\n\n输入文本可以作为参数提供：\n\n```bash\n$ claude -p \"Explain this code\"\n\n```\n\n或者输入文本可以通过 stdin 管道传输：\n\n```bash\n$ echo \"Explain this code\" | claude -p\n\n```\n\n### 流式 JSON 输入\n\n通过 `stdin` 提供的消息流，其中每条消息代表一个用户轮次。这允许对话的多个轮次而无需重新启动 `claude` 二进制文件，并允许在模型处理请求时向模型提供指导。\n\n每条消息都是一个 JSON ‘用户消息’ 对象，遵循与输出消息模式相同的格式。消息使用 [**jsonl**](https://jsonlines.org/) 格式格式化，其中输入的每一行都是一个完整的 JSON 对象。流式 JSON 输入需要 `-p` 和 `--output-format stream-json`。\n\n目前这仅限于纯文本用户消息。\n\n```bash\n$ echo '{\"type\":\"user\",\"message\":{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Explain this code\"}]}}' | claude -p --output-format=stream-json --input-format=stream-json --verbose\n\n```\n\n## 示例\n\n### 简单脚本集成\n\n```bash\n#!/bin/bash\n\n# 运行 Claude 并检查退出代码的简单函数\nrun_claude() {\n    local prompt=\"$1\"\n    local output_format=\"${2:-text}\"\n\n    if claude -p \"$prompt\" --output-format \"$output_format\"; then\n        echo \"Success!\"\n    else\n        echo \"Error: Claude failed with exit code $?\" >&2\n        return 1\n    fi\n}\n\n# 使用示例\nrun_claude \"Write a Python function to read CSV files\"\nrun_claude \"Optimize this database query\" \"json\"\n\n```\n\n### 使用 Claude 处理文件\n\n```bash\n# 通过 Claude 处理文件\n$ cat mycode.py | claude -p \"Review this code for bugs\"\n\n# 处理多个文件\n$ for file in *.js; do\n    echo \"Processing $file...\"\n    claude -p \"Add JSDoc comments to this file:\" < \"$file\" > \"${file}.documented\"\ndone\n\n# 在管道中使用 Claude\n$ grep -l \"TODO\" *.py | while read file; do\n    claude -p \"Fix all TODO items in this file\" < \"$file\"\ndone\n\n```\n\n### 会话管理\n\n```bash\n# 启动会话并捕获会话 ID\n$ claude -p \"Initialize a new project\" --output-format json | jq -r '.session_id' > session.txt\n\n# 使用相同会话继续\n$ claude -p --resume \"$(cat session.txt)\" \"Add unit tests\"\n\n```\n\n## 最佳实践\n\n1.  **使用 JSON 输出格式** 进行响应的程序化解析：\n    \n\n```bash\n# 使用 jq 解析 JSON 响应\nresult=$(claude -p \"Generate code\" --output-format json)\ncode=$(echo \"$result\" | jq -r '.result')\ncost=$(echo \"$result\" | jq -r '.cost_usd')\n\n```\n\n2.  **优雅地处理错误** - 检查退出代码和 stderr：\n    \n\n```bash\nif ! claude -p \"$prompt\" 2>error.log; then\n    echo \"Error occurred:\" >&2\n    cat error.log >&2\n    exit 1\nfi\n\n```\n\n3.  **使用会话管理** 在多轮对话中维护上下文\n    \n4.  **考虑超时** 对于长时间运行的操作：\n    \n\n```bash\ntimeout 300 claude -p \"$complex_prompt\" || echo \"Timed out after 5 minutes\"\n\n```\n\n5.  **尊重速率限制** 在进行多个请求时通过在调用之间添加延迟\n    \n\n## 实际应用\n\nClaude Code SDK 能够与您的开发工作流程进行强大的集成。一个值得注意的例子是 [**Claude Code GitHub Actions**](https://docs.anthropic.com/zh-CN/docs/claude-code/github-actions)，它使用 SDK 直接在您的 GitHub 工作流程中提供自动化代码审查、PR 创建和问题分类功能。\n\n## 相关资源\n\n*   [**CLI 使用和控制**](https://docs.anthropic.com/zh-CN/docs/claude-code/cli-reference) - 完整的 CLI 文档\n    \n*   [**GitHub Actions 集成**](https://docs.anthropic.com/zh-CN/docs/claude-code/github-actions) - 使用 Claude 自动化您的 GitHub 工作流程\n    \n*   [**常见工作流程**](https://docs.anthropic.com/zh-CN/docs/claude-code/common-workflows) - 常见用例的分步指南\n    \n\n# 开始使用 Claude Code hooks\n\n学习如何通过注册 shell 命令来自定义和扩展 Claude Code 的行为\n\nClaude Code hooks 是用户定义的 shell 命令，在 Claude Code 生命周期的各个点执行。Hooks 提供对 Claude Code 行为的确定性控制，确保某些操作总是发生，而不是依赖 LLM 选择运行它们。\n\n有关 hooks 的参考文档，请参阅 [**Hooks 参考**](https://docs.anthropic.com/zh-CN/docs/claude-code/hooks)。\n\nhooks 的示例用例包括：\n\n*   **通知**：自定义当 Claude Code 等待您的输入或运行权限时如何获得通知。\n    \n*   **自动格式化**：在每次文件编辑后对 .ts 文件运行 `prettier`，对 .go 文件运行 `gofmt` 等。\n    \n*   **日志记录**：跟踪和计算所有执行的命令以用于合规性或调试。\n    \n*   **反馈**：当 Claude Code 产生不遵循您的代码库约定的代码时提供自动反馈。\n    \n*   **自定义权限**：阻止对生产文件或敏感目录的修改。\n    \n\n通过将这些规则编码为 hooks 而不是提示指令，您将建议转换为应用程序级代码，每次预期运行时都会执行。\n\n您必须考虑添加 hooks 时的安全影响，因为 hooks 在代理循环期间使用您当前环境的凭据自动运行。 例如，恶意 hooks 代码可以泄露您的数据。在注册之前始终检查您的 hooks 实现。\n\n有关完整的安全最佳实践，请参阅 hooks 参考文档中的[**安全考虑**](https://docs.anthropic.com/zh-CN/docs/claude-code/hooks#security-considerations)。\n\n## Hook 事件概述\n\nClaude Code 提供了几个在工作流程不同点运行的 hook 事件：\n\n*   **PreToolUse**：在工具调用之前运行（可以阻止它们）\n    \n*   **PostToolUse**：在工具调用完成后运行\n    \n*   **Notification**：当 Claude Code 发送通知时运行\n    \n*   **Stop**：当 Claude Code 完成响应时运行\n    \n*   **SubagentStop**：当子代理任务完成时运行\n    \n\n每个事件接收不同的数据，并可以以不同的方式控制 Claude 的行为。\n\n## 快速开始\n\n在这个快速开始中，您将添加一个记录 Claude Code 运行的 shell 命令的 hook。\n\n### 先决条件\n\n安装 `jq` 用于命令行中的 JSON 处理。\n\n### 步骤 1：打开 hooks 配置\n\n运行 `/hooks` [**斜杠命令**](https://docs.anthropic.com/zh-CN/docs/claude-code/slash-commands) 并选择 `PreToolUse` hook 事件。\n\n`PreToolUse` hooks 在工具调用之前运行，可以阻止它们，同时为 Claude 提供关于如何做不同事情的反馈。\n\n### 步骤 2：添加匹配器\n\n选择 `+ Add new matcher…` 以仅在 Bash 工具调用上运行您的 hook。\n\n为匹配器输入 `Bash`。\n\n您可以使用 `*` 来匹配所有工具。\n\n### 步骤 3：添加 hook\n\n选择 `+ Add new hook…` 并输入此命令：\n\n```bash\njq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt\n\n```\n\n### 步骤 4：保存您的配置\n\n对于存储位置，选择 `User settings`，因为您正在记录到您的主目录。然后此 hook 将应用于所有项目，而不仅仅是您当前的项目。\n\n然后按 Esc 直到您返回到 REPL。您的 hook 现在已注册！\n\n### 步骤 5：验证您的 hook\n\n再次运行 `/hooks` 或检查 `~/.claude/settings.json` 以查看您的配置：\n\n```json\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"Bash\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"jq -r '\\\"\\(.tool_input.command) - \\(.tool_input.description // \\\"No description\\\")\\\"' >> ~/.claude/bash-command-log.txt\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\n### 步骤 6：测试您的 hook\n\n要求 Claude 运行一个简单的命令，如 `ls` 并检查您的日志文件：\n\n```bash\ncat ~/.claude/bash-command-log.txt\n\n```\n\n您应该看到类似以下的条目：\n\n```plaintext\nls - Lists files and directories\n\n```\n\n## 更多示例\n\n有关完整的示例实现，请参阅我们公共代码库中的 [**bash 命令验证器示例**](https://github.com/anthropics/claude-code/blob/main/examples/hooks/bash_command_validator_example.py)。\n\n### 代码格式化 Hook\n\n编辑后自动格式化 TypeScript 文件：\n\n```json\n{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Edit|MultiEdit|Write\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"jq -r '.tool_input.file_path' | { read file_path; if echo \\\"$file_path\\\" | grep -q '\\.ts$'; then npx prettier --write \\\"$file_path\\\"; fi; }\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\n### 自定义通知 Hook\n\n当 Claude 需要输入时获得桌面通知：\n\n```json\n{\n  \"hooks\": {\n    \"Notification\": [\n      {\n        \"matcher\": \"\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"notify-send 'Claude Code' 'Awaiting your input'\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\n### 文件保护 Hook\n\n阻止对敏感文件的编辑：\n\n```json\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"Edit|MultiEdit|Write\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"python3 -c \\\"import json, sys; data=json.load(sys.stdin); path=data.get('tool_input',{}).get('file_path',''); sys.exit(2 if any(p in path for p in ['.env', 'package-lock.json', '.git/']) else 0)\\\"\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n# 故障排除\n\n发现Claude Code安装和使用中常见问题的解决方案。\n\n## 常见安装问题\n\n### Linux权限问题\n\n使用npm安装Claude Code时，如果您的npm全局前缀不可用户写入（例如`/usr`或`/usr/local`），您可能会遇到权限错误。\n\n#### 推荐解决方案：创建用户可写的npm前缀\n\n最安全的方法是配置npm使用您主目录内的目录：\n\n```shell\n# 首先，保存现有全局包的列表以便后续迁移\nnpm list -g --depth=0 > ~/npm-global-packages.txt\n\n# 为您的全局包创建目录\nmkdir -p ~/.npm-global\n\n# 配置npm使用新的目录路径\nnpm config set prefix ~/.npm-global\n\n# 注意：根据您的shell，将~/.bashrc替换为~/.zshrc、~/.profile或其他适当的文件\necho 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc\n\n# 应用新的PATH设置\nsource ~/.bashrc\n\n# 现在在新位置重新安装Claude Code\nnpm install -g @anthropic-ai/claude-code\n\n# 可选：在新位置重新安装您之前的全局包\n# 查看~/npm-global-packages.txt并安装您想要保留的包\n```\n\n推荐此解决方案是因为它：\n\n*   避免修改系统目录权限\n    \n*   为您的全局npm包创建一个干净、专用的位置\n    \n*   遵循安全最佳实践\n    \n\n#### 系统恢复：如果您已运行更改系统文件所有权和权限或类似的命令\n\n如果您已经运行了更改系统目录权限的命令（例如`sudo chown -R $USER:$(id -gn) /usr && sudo chmod -R u+w /usr`）并且您的系统现在损坏（例如，如果您看到`sudo: /usr/bin/sudo must be owned by uid 0 and have the setuid bit set`），您需要执行恢复步骤。\n\n##### Ubuntu/Debian恢复方法：\n\n1.  重启时，按住**SHIFT**键访问GRUB菜单\n    \n2.  选择”Advanced options for Ubuntu/Debian”\n    \n3.  选择恢复模式选项\n    \n4.  选择”Drop to root shell prompt”\n    \n5.  将文件系统重新挂载为可写：\n    \n\n```bash\nmount -o remount,rw /\n\n```\n\n6.  修复权限：\n    \n\n```bash\n# 恢复root所有权\nchown -R root:root /usr\nchmod -R 755 /usr\n\n# 确保/usr/local由您的用户拥有以用于npm包\nchown -R YOUR_USERNAME:YOUR_USERNAME /usr/local\n\n# 为关键二进制文件设置setuid位\nchmod u+s /usr/bin/sudo\nchmod 4755 /usr/bin/sudo\nchmod u+s /usr/bin/su\nchmod u+s /usr/bin/passwd\nchmod u+s /usr/bin/newgrp\nchmod u+s /usr/bin/gpasswd\nchmod u+s /usr/bin/chsh\nchmod u+s /usr/bin/chfn\n\n# 修复sudo配置\nchown root:root /usr/libexec/sudo/sudoers.so\nchmod 4755 /usr/libexec/sudo/sudoers.so\nchown root:root /etc/sudo.conf\nchmod 644 /etc/sudo.conf\n```\n\n7.  重新安装受影响的包（可选但推荐）：\n    \n\n```shell\n# 保存已安装包的列表\ndpkg --get-selections > /tmp/installed_packages.txt\n\n# 重新安装它们\nawk '{print $1}' /tmp/installed_packages.txt | xargs -r apt-get install --reinstall -y\n```\n\n8.  重启：\n    \n\n```bash\nreboot\n\n```\n\n##### 替代Live USB恢复方法：\n\n如果恢复模式不起作用，您可以使用live USB：\n\n1.  从live USB启动（Ubuntu、Debian或任何Linux发行版）\n    \n2.  找到您的系统分区：\n    \n\n```bash\nlsblk\n\n```\n\n3.  挂载您的系统分区：\n    \n\n```bash\nsudo mount /dev/sdXY /mnt  # 将sdXY替换为您的实际系统分区\n\n```\n\n4.  如果您有单独的启动分区，也要挂载它：\n    \n\n```bash\nsudo mount /dev/sdXZ /mnt/boot  # 如果需要\n\n```\n\n5.  Chroot到您的系统：\n    \n\n```shell\n# 对于Ubuntu/Debian：\nsudo chroot /mnt\n\n# 对于基于Arch的系统：\nsudo arch-chroot /mnt\n```\n\n6.  按照上面Ubuntu/Debian恢复方法的步骤6-8执行\n    \n\n恢复系统后，按照上面的推荐解决方案设置用户可写的npm前缀。\n\n## 自动更新器问题\n\n如果Claude Code无法自动更新，可能是由于您的npm全局前缀目录的权限问题。按照上面的[**推荐解决方案**](https://docs.anthropic.com/zh-CN/docs/claude-code/troubleshooting#%E6%8E%A8%E8%8D%90%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%8F%AF%E5%86%99%E7%9A%84npm%E5%89%8D%E7%BC%80)来修复此问题。\n\n如果您更愿意禁用自动更新器，您可以将`DISABLE_AUTOUPDATER`[**环境变量**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#environment-variables)设置为`1`\n\n## 权限和身份验证\n\n### 重复的权限提示\n\n如果您发现自己重复批准相同的命令，您可以使用`/permissions`命令允许特定工具在无需批准的情况下运行。请参阅[**权限文档**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#configuring-permissions)。\n\n### 身份验证问题\n\n如果您遇到身份验证问题：\n\n1.  运行`/logout`完全退出登录\n    \n2.  关闭Claude Code\n    \n3.  使用`claude`重启并重新完成身份验证过程\n    \n\n如果问题持续存在，请尝试：\n\n```bash\nrm -rf ~/.config/claude-code/auth.json\nclaude\n\n```\n\n这会删除您存储的身份验证信息并强制进行干净的登录。\n\n## 性能和稳定性\n\n### 高CPU或内存使用率\n\nClaude Code设计用于与大多数开发环境配合使用，但在处理大型代码库时可能会消耗大量资源。如果您遇到性能问题：\n\n1.  定期使用`/compact`来减少上下文大小\n    \n2.  在主要任务之间关闭并重启Claude Code\n    \n3.  考虑将大型构建目录添加到您的`.gitignore`文件中\n    \n\n### 命令挂起或冻结\n\n如果Claude Code似乎无响应：\n\n1.  按Ctrl+C尝试取消当前操作\n    \n2.  如果无响应，您可能需要关闭终端并重启\n    \n\n### ESC键在JetBrains（IntelliJ、PyCharm等）终端中不工作\n\n如果您在JetBrains终端中使用Claude Code，ESC键无法按预期中断代理，这可能是由于与JetBrains默认快捷键的键绑定冲突。\n\n要修复此问题：\n\n1.  转到设置 → 工具 → 终端\n    \n2.  点击”覆盖IDE快捷键”旁边的”配置终端键绑定”超链接\n    \n3.  在终端键绑定中，向下滚动到”切换焦点到编辑器”并删除该快捷键\n    \n\n这将允许ESC键正确用于取消Claude Code操作，而不是被PyCharm的”切换焦点到编辑器”操作捕获。\n\n## 获取更多帮助\n\n如果您遇到此处未涵盖的问题：\n\n1.  在Claude Code中使用`/bug`命令直接向Anthropic报告问题\n    \n2.  检查[**GitHub存储库**](https://github.com/anthropics/claude-code)了解已知问题\n    \n3.  运行`/doctor`检查您的Claude Code安装的健康状况\n    \n\n# 设置 Claude Code\n\n在您的开发机器上安装、认证并开始使用 Claude Code。\n\n## 系统要求\n\n*   **操作系统**: macOS 10.15+、Ubuntu 20.04+/Debian 10+ 或通过 WSL 的 Windows\n    \n*   **硬件**: 最少 4GB RAM\n    \n*   **软件**:\n    \n    *   Node.js 18+\n        \n    *   [**git**](https://git-scm.com/downloads) 2.23+（可选）\n        \n    *   [**GitHub**](https://cli.github.com/) 或 [**GitLab**](https://gitlab.com/gitlab-org/cli) CLI 用于 PR 工作流（可选）\n    \n*   **网络**: 需要互联网连接进行认证和 AI 处理\n    \n*   **地区**: 仅在[**支持的国家**](https://www.anthropic.com/supported-countries)可用\n    \n\n## 安装和认证\n\n**1**\n\n**安装 Claude Code**\n\nTo install Claude Code, run the following command:\n\n```sh\nnpm install -g @anthropic-ai/claude-code\n\n```\n\n**2**\n\n**导航到您的项目**\n\n```bash\ncd your-project-directory \n\n```\n\n**3**\n\n**启动 Claude Code**\n\n```bash\nclaude\n\n```\n\n**4**\n\n**完成认证**\n\nClaude Code 提供多种认证选项：\n\n1.  **Anthropic Console**: 默认选项。通过 Anthropic Console 连接并 完成 OAuth 流程。需要在 [**console.anthropic.com**](https://console.anthropic.com/) 激活计费。\n    \n2.  **Claude App（Pro 或 Max 计划）**: 订阅 Claude 的 [**Pro 或 Max 计划**](https://www.anthropic.com/pricing)，获得包含 Claude Code 和网页界面的统一订阅。以相同价格获得更多价值，同时在一个地方管理您的账户。使用您的 Claude.ai 账户登录。在启动期间，选择与您的订阅类型匹配的选项。\n    \n3.  **企业平台**: 配置 Claude Code 使用 [**Amazon Bedrock 或 Google Vertex AI**](https://docs.anthropic.com/zh-CN/docs/claude-code/bedrock-vertex-proxies) 进行企业部署，使用您现有的云基础设施。\n    \n\n## 故障排除\n\n### WSL 安装故障排除\n\n目前，Claude Code 不能直接在 Windows 中运行，而是需要 WSL。\n\n您可能在 WSL 中遇到以下问题：\n\n**操作系统/平台检测问题**: 如果您在安装过程中收到错误，WSL 可能正在使用 Windows `npm`。尝试：\n\n*   在安装前运行 `npm config set os linux`\n    \n*   使用 `npm install -g @anthropic-ai/claude-code --force --no-os-check` 安装（不要使用 `sudo`）\n    \n\n**找不到 Node 错误**: 如果您在运行 `claude` 时看到 `exec: node: not found`，您的 WSL 环境可能正在使用 Windows 安装的 Node.js。您可以通过 `which npm` 和 `which node` 确认这一点，它们应该指向以 `/usr/` 开头的 Linux 路径，而不是 `/mnt/c/`。要解决这个问题，请尝试通过您的 Linux 发行版的包管理器或通过 [`**nvm**`](https://github.com/nvm-sh/nvm) 安装 Node。\n\n## 优化您的终端设置\n\nClaude Code 在您的终端正确配置时效果最佳。遵循这些指南来优化您的体验。\n\n**支持的 shell**:\n\n*   Bash\n    \n*   Zsh\n    \n*   Fish\n    \n\n### 主题和外观\n\nClaude 无法控制您终端的主题。这由您的终端应用程序处理。您可以在入门时或通过 `/config` 命令随时将 Claude Code 的主题与您的终端匹配\n\n### 换行\n\n您有几个选项可以在 Claude Code 中输入换行：\n\n*   **快速转义**: 输入 `\\` 然后按 Enter 创建新行\n    \n*   **键盘快捷键**: 通过适当配置按 Option+Enter（Meta+Enter）\n    \n\n在您的终端中设置 Option+Enter：\n\n**对于 Mac Terminal.app:**\n\n1.  打开设置 → 配置文件 → 键盘\n    \n2.  勾选”使用 Option 作为 Meta 键”\n    \n\n**对于 iTerm2 和 VSCode 终端:**\n\n1.  打开设置 → 配置文件 → 键\n    \n2.  在常规下，将左/右 Option 键设置为”Esc+”\n    \n\n**iTerm2 和 VSCode 用户提示**: 在 Claude Code 中运行 `/terminal-setup` 以自动配置 Shift+Enter 作为更直观的替代方案。\n\n### 通知设置\n\n通过适当的通知配置，永远不会错过 Claude 完成任务的时机：\n\n#### 终端铃声通知\n\n在任务完成时启用声音警报：\n\n```sh\nclaude config set --global preferredNotifChannel terminal_bell\n\n```\n\n**对于 macOS 用户**: 不要忘记在系统设置 → 通知 → \\[您的终端应用\\] 中启用通知权限。\n\n#### iTerm 2 系统通知\n\n对于任务完成时的 iTerm 2 警报：\n\n1.  打开 iTerm 2 偏好设置\n    \n2.  导航到配置文件 → 终端\n    \n3.  启用”静音铃声”和过滤器警报 → “发送转义序列生成的警报”\n    \n4.  设置您首选的通知延迟\n    \n\n请注意，这些通知特定于 iTerm 2，在默认的 macOS 终端中不可用。\n\n### 处理大型输入\n\n在处理大量代码或长指令时：\n\n*   **避免直接粘贴**: Claude Code 可能难以处理非常长的粘贴内容\n    \n*   **使用基于文件的工作流**: 将内容写入文件并要求 Claude 读取它\n    \n*   **注意 VS Code 限制**: VS Code 终端特别容易截断长粘贴\n    \n\n### Vim 模式\n\nClaude Code 支持 Vim 键绑定的子集，可以通过 `/vim` 启用或通过 `/config` 配置。\n\n支持的子集包括：\n\n*   模式切换: `Esc`（到 NORMAL）、`i`/`I`、`a`/`A`、`o`/`O`（到 INSERT）\n    \n*   导航: `h`/`j`/`k`/`l`、`w`/`e`/`b`、`0`/`$`/`^`、`gg`/`G`\n    \n*   编辑: `x`、`dw`/`de`/`db`/`dd`/`D`、`cw`/`ce`/`cb`/`cc`/`C`、`.`（重复）\n    \n\n# 身份和访问管理\n\n了解如何为您的组织配置Claude Code的用户身份验证、授权和访问控制。\n\n## 身份验证方法\n\n设置Claude Code需要访问Anthropic模型。对于团队，您可以通过以下三种方式之一设置Claude Code访问：\n\n*   通过Anthropic控制台使用Anthropic API\n    \n*   Amazon Bedrock\n    \n*   Google Vertex AI\n    \n\n### Anthropic API身份验证\n\n**通过Anthropic API为您的团队设置Claude Code访问：**\n\n1.  使用您现有的Anthropic控制台账户或创建新的Anthropic控制台账户\n    \n2.  您可以通过以下任一方法添加用户：\n    \n    *   从控制台内批量邀请用户（控制台 -> 设置 -> 成员 -> 邀请）\n        \n    *   [**设置SSO**](https://support.anthropic.com/en/articles/10280258-setting-up-single-sign-on-on-the-api-console)\n    \n3.  邀请用户时，他们需要以下角色之一：\n    \n    *   “Claude Code”角色意味着用户只能创建Claude Code API密钥\n        \n    *   “开发者”角色意味着用户可以创建任何类型的API密钥\n    \n4.  每个受邀用户需要完成以下步骤：\n    \n    *   接受控制台邀请\n        \n    *   [**检查系统要求**](https://docs.anthropic.com/zh-CN/docs/claude-code/setup#system-requirements)\n        \n    *   [**安装Claude Code**](https://docs.anthropic.com/zh-CN/docs/claude-code/setup#installation)\n        \n    *   使用控制台账户凭据登录\n        \n\n### 云提供商身份验证\n\n**通过Bedrock或Vertex为您的团队设置Claude Code访问：**\n\n1.  遵循[**Bedrock文档**](https://docs.anthropic.com/zh-CN/docs/claude-code/amazon-bedrock)或[**Vertex文档**](https://docs.anthropic.com/zh-CN/docs/claude-code/google-vertex-ai)\n    \n2.  向您的用户分发环境变量和生成云凭据的说明。了解更多关于如何[**在此处管理配置**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings)。\n    \n3.  用户可以[**安装Claude Code**](https://docs.anthropic.com/zh-CN/docs/claude-code/setup#installation)\n    \n\n## 访问控制和权限\n\n我们支持细粒度权限，以便您能够准确指定代理被允许做什么（例如运行测试、运行linter）以及不被允许做什么（例如更新云基础设施）。这些权限设置可以检入版本控制并分发给您组织中的所有开发者，也可以由个别开发者自定义。\n\n### 权限系统\n\nClaude Code使用分层权限系统来平衡功能和安全性：\n\n| **工具类型** | **示例** | **需要批准** | **”是的，不要再问”行为** |\n| --- | --- | --- | --- |\n| 只读 | 文件读取、LS、Grep | 否 | 不适用 |\n| Bash命令 | Shell执行 | 是 | 每个项目目录和命令永久生效 |\n| 文件修改 | 编辑/写入文件 | 是 | 直到会话结束 |\n\n### 配置权限\n\n您可以使用`/permissions`查看和管理Claude Code的工具权限。此UI列出所有权限规则及其来源的settings.json文件。\n\n*   **允许**规则将允许Claude Code使用指定工具而无需进一步手动批准。\n    \n*   **拒绝**规则将阻止Claude Code使用指定工具。拒绝规则优先于允许规则。\n    \n*   **其他目录**将Claude的文件访问扩展到初始工作目录之外的目录。\n    \n*   **默认模式**控制Claude在遇到新请求时的权限行为。\n    \n\n权限规则使用格式：`Tool(optional-specifier)`\n\n仅为工具名称的规则匹配该工具的任何使用。例如，将`Bash`添加到允许规则列表中将允许Claude Code使用Bash工具而无需用户批准。\n\n#### 权限模式\n\nClaude Code支持几种权限模式，可以在[**设置文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#settings-files)中设置为`defaultMode`：\n\n| **模式** | **描述** |\n| --- | --- |\n| `default` | 标准行为 - 在首次使用每个工具时提示权限 |\n| `acceptEdits` | 自动接受会话的文件编辑权限 |\n| `plan` | 计划模式 - Claude可以分析但不能修改文件或执行命令 |\n| `bypassPermissions` | 跳过所有权限提示（需要安全环境 - 请参见下面的警告） |\n\n#### 工作目录\n\n默认情况下，Claude可以访问启动它的目录中的文件。您可以扩展此访问权限：\n\n*   **启动期间**：使用`--add-dir <path>` CLI参数\n    \n*   **会话期间**：使用`/add-dir`斜杠命令\n    \n*   **持久配置**：添加到[**设置文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#settings-files)中的`additionalDirectories`\n    \n\n其他目录中的文件遵循与原始工作目录相同的权限规则 - 它们变得可读而无需提示，文件编辑权限遵循当前权限模式。\n\n#### 工具特定权限规则\n\n一些工具使用可选说明符进行更细粒度的权限控制。例如，带有`Bash(git diff:*)`的允许规则将允许以`git diff`开头的Bash命令。以下工具支持带有说明符的权限规则：\n\n**Bash**\n\n*   `Bash(npm run build)` 匹配确切的Bash命令`npm run build`\n    \n*   `Bash(npm run test:*)` 匹配以`npm run test`开头的Bash命令。\n    \n\nClaude Code了解shell操作符（如`&&`），因此像`Bash(safe-cmd:*)`这样的前缀匹配规则不会给它运行命令`safe-cmd && other-cmd`的权限\n\n**Read & Edit**\n\n`Edit`规则适用于所有编辑文件的内置工具。Claude将尽力将`Read`规则应用于所有读取文件的内置工具，如Grep、Glob和LS。\n\nRead和Edit规则都遵循[**gitignore**](https://git-scm.com/docs/gitignore)规范。模式相对于包含`.claude/settings.json`的目录解析。要引用绝对路径，请使用`//`。对于相对于您主目录的路径，请使用`~/`。\n\n*   `Edit(docs/**)` 匹配对项目`docs`目录中文件的编辑\n    \n*   `Read(~/.zshrc)` 匹配对您的`~/.zshrc`文件的读取\n    \n*   `Edit(//tmp/scratch.txt)` 匹配对`/tmp/scratch.txt`的编辑\n    \n\n**WebFetch**\n\n*   `WebFetch(domain:example.com)` 匹配对example.com的获取请求\n    \n\n**MCP**\n\n*   `mcp__puppeteer` 匹配由`puppeteer`服务器提供的任何工具（在Claude Code中配置的名称）\n    \n*   `mcp__puppeteer__puppeteer_navigate` 匹配由`puppeteer`服务器提供的`puppeteer_navigate`工具\n    \n\n### 企业管理策略设置\n\n对于Claude Code的企业部署，我们支持企业管理策略设置，这些设置优先于用户和项目设置。这允许系统管理员强制执行用户无法覆盖的安全策略。\n\n系统管理员可以将策略部署到：\n\n*   **macOS**：`/Library/Application Support/ClaudeCode/managed-settings.json`\n    \n*   **Linux和Windows（通过WSL）**：`/etc/claude-code/managed-settings.json`\n    \n\n这些策略文件遵循与常规[**设置文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#settings-files)相同的格式，但不能被用户或项目设置覆盖。这确保了整个组织的一致安全策略。\n\n### 设置优先级\n\n当存在多个设置源时，它们按以下顺序应用（从最高到最低优先级）：\n\n1.  企业策略\n    \n2.  命令行参数\n    \n3.  本地项目设置（`.claude/settings.local.json`）\n    \n4.  共享项目设置（`.claude/settings.json`）\n    \n5.  用户设置（`~/.claude/settings.json`）\n    \n\n此层次结构确保始终执行组织策略，同时在适当的情况下仍允许在项目和用户级别的灵活性。\n\n### 使用钩子进行额外权限控制\n\n[**Claude Code钩子**](https://docs.anthropic.com/zh-CN/docs/claude-code/hooks)提供了一种注册自定义shell命令以在运行时执行权限评估的方法。当Claude Code进行工具调用时，PreToolUse钩子在权限系统运行之前运行，钩子输出可以确定是否批准或拒绝工具调用以代替权限系统。\n\n## 凭据管理\n\nClaude Code支持通过Claude.ai凭据、Anthropic API凭据、Bedrock Auth和Vertex Auth进行身份验证。在macOS上，API密钥、OAuth令牌和其他凭据存储在加密的macOS钥匙串中。或者，设置[**apiKeyHelper**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#available-settings)可以设置为返回API密钥的shell脚本。默认情况下，此助手在5分钟后或在HTTP 401响应时被调用；指定环境变量`CLAUDE_CODE_API_KEY_HELPER_TTL_MS`定义自定义刷新间隔。\n\n# 有效管理成本\n\n了解如何在使用 Claude Code 时跟踪和优化令牌使用量和成本。\n\nClaude Code 每次交互都会消耗令牌。平均成本为每个开发者每天 6 美元，90% 的用户每日成本保持在 12 美元以下。\n\n对于团队使用，Claude Code 按 API 令牌消耗量收费。平均而言，使用 Sonnet 4 的 Claude Code 每个开发者每月成本约为 100-200 美元，但根据用户运行的实例数量以及是否在自动化中使用，存在很大差异。\n\n## 跟踪您的成本\n\n*   使用 `/cost` 查看当前会话使用量\n    \n*   **Anthropic Console 用户**：\n    \n    *   在 Anthropic Console 中检查[**历史使用量**](https://support.anthropic.com/en/articles/9534590-cost-and-usage-reporting-in-console)（需要管理员或计费角色）\n        \n    *   为 Claude Code 工作区设置[**工作区支出限制**](https://support.anthropic.com/en/articles/9796807-creating-and-managing-workspaces)（需要管理员角色）\n    \n*   **Pro 和 Max 计划用户**：使用量包含在您的订阅中\n    \n\n## 为团队管理成本\n\n使用 Anthropic API 时，您可以限制 Claude Code 工作区的总支出。要配置，请[**按照这些说明操作**](https://support.anthropic.com/en/articles/9796807-creating-and-managing-workspaces)。管理员可以通过[**按照这些说明操作**](https://support.anthropic.com/en/articles/9534590-cost-and-usage-reporting-in-console)查看成本和使用量报告。\n\n在 Bedrock 和 Vertex 上，Claude Code 不会从您的云端发送指标。为了获取成本指标，几家大型企业报告使用了 [**LiteLLM**](https://docs.anthropic.com/zh-CN/docs/claude-code/bedrock-vertex-proxies#litellm)，这是一个开源工具，帮助公司[**按密钥跟踪支出**](https://docs.litellm.ai/docs/proxy/virtual_keys#tracking-spend)。该项目与 Anthropic 无关，我们也未审核其安全性。\n\n## 减少令牌使用量\n\n*   **紧凑对话：**\n    \n    *   Claude 默认在上下文超过 95% 容量时使用自动紧凑\n        \n    *   切换自动紧凑：运行 `/config` 并导航到”Auto-compact enabled”\n        \n    *   当上下文变大时手动使用 `/compact`\n        \n    *   添加自定义指令：`/compact Focus on code samples and API usage`\n        \n    *   通过添加到 CLAUDE.md 来自定义紧凑：\n        \n\n```shell\n# Summary instructions\n\nWhen you are using compact, please focus on test output and code changes\n```\n\n*   **编写具体查询：** 避免触发不必要扫描的模糊请求\n    \n*   **分解复杂任务：** 将大型任务拆分为专注的交互\n    \n*   **在任务之间清除历史：** 使用 `/clear` 重置上下文\n    \n\n成本可能因以下因素而显著变化：\n\n*   被分析代码库的大小\n    \n*   查询的复杂性\n    \n*   被搜索或修改的文件数量\n    \n*   对话历史的长度\n    \n*   紧凑对话的频率\n    \n*   后台进程（俳句生成、对话摘要）\n    \n\n## 后台令牌使用量\n\nClaude Code 即使在空闲时也会为某些后台功能使用令牌：\n\n*   **俳句生成**：您输入时出现的小型创意消息（大约每天 1 分钱）\n    \n*   **对话摘要**：为 `claude --resume` 功能摘要之前对话的后台作业\n    \n*   **命令处理**：某些命令如 `/cost` 可能生成请求来检查状态\n    \n\n这些后台进程即使没有主动交互也会消耗少量令牌（通常每个会话低于 0.04 美元）。\n\n# 分析\n\n查看您组织的Claude Code部署的详细使用洞察和生产力指标。\n\nClaude Code提供了一个分析仪表板，帮助组织了解开发者使用模式，跟踪生产力指标，并优化他们的Claude Code采用情况。\n\n分析功能目前仅适用于通过Anthropic控制台使用Anthropic API的Claude Code组织。\n\n## 访问分析\n\n导航到分析仪表板：[**console.anthropic.com/claude\\_code**](https://console.anthropic.com/claude_code)。\n\n### 所需角色\n\n*   **主要所有者**\n    \n*   **所有者**\n    \n*   **计费**\n    \n*   **管理员**\n    \n*   **开发者**\n    \n\n具有**用户**、**Claude Code用户**或**成员管理员**角色的用户无法访问分析。\n\n## 可用指标\n\n### 接受的代码行数\n\n用户在会话中接受的由Claude Code编写的代码总行数。\n\n*   排除被拒绝的代码建议\n    \n*   不跟踪后续删除\n    \n\n### 建议接受率\n\n用户接受代码编辑工具使用的百分比，包括：\n\n*   编辑\n    \n*   多重编辑\n    \n*   写入\n    \n*   笔记本编辑\n    \n\n### 活动\n\n**用户**：给定日期的活跃用户数量（左侧Y轴上的数字）\n\n**会话**：给定日期的活跃会话数量（右侧Y轴上的数字）\n\n### 支出\n\n**用户**：给定日期的活跃用户数量（左侧Y轴上的数字）\n\n**支出**：给定日期的总支出美元（右侧Y轴上的数字）\n\n# Claude Code 设置\n\n使用全局和项目级设置以及环境变量配置 Claude Code。\n\nClaude Code 提供多种设置来配置其行为以满足您的需求。您可以通过在使用交互式 REPL 时运行 `/config` 命令来配置 Claude Code。\n\n## 设置文件\n\n`settings.json` 文件是我们通过分层设置配置 Claude Code 的官方机制：\n\n*   **用户设置** 在 `~/.claude/settings.json` 中定义，适用于所有项目。\n    \n*   **项目设置** 保存在您的项目目录中：\n    \n    *   `.claude/settings.json` 用于检入源代码控制并与团队共享的设置\n        \n    *   `.claude/settings.local.json` 用于不检入的设置，适用于个人偏好和实验。Claude Code 会在创建时配置 git 忽略 `.claude/settings.local.json`。\n    \n*   对于 Claude Code 的企业部署，我们还支持**企业管理策略设置**。这些设置优先于用户和项目设置。系统管理员可以在 macOS 上将策略部署到 `/Library/Application Support/ClaudeCode/managed-settings.json`，在 Linux 和通过 WSL 的 Windows 上部署到 `/etc/claude-code/managed-settings.json`。\n    \n\nExample settings.json\n\n```json\n{\n  \"permissions\": {\n    \"allow\": [\n      \"Bash(npm run lint)\",\n      \"Bash(npm run test:*)\",\n      \"Read(~/.zshrc)\"\n    ],\n    \"deny\": [\n      \"Bash(curl:*)\"\n    ]\n  },\n  \"env\": {\n    \"CLAUDE_CODE_ENABLE_TELEMETRY\": \"1\",\n    \"OTEL_METRICS_EXPORTER\": \"otlp\"\n  }\n}\n\n```\n\n### 可用设置\n\n`settings.json` 支持多个选项：\n\n| **键** | **描述** | **示例** |\n| --- | --- | --- |\n| `apiKeyHelper` | 自定义脚本，在 `/bin/sh` 中执行，用于生成认证值。此值通常作为模型请求的 `X-Api-Key`、`Authorization: Bearer` 和 `Proxy-Authorization: Bearer` 头发送 | `/bin/generate_temp_api_key.sh` |\n| `cleanupPeriodDays` | 本地保留聊天记录的时间长度（默认：30 天） | `20` |\n| `env` | 将应用于每个会话的环境变量 | `{\"FOO\": \"bar\"}` |\n| `includeCoAuthoredBy` | 是否在 git 提交和拉取请求中包含 `co-authored-by Claude` 署名（默认：`true`） | `false` |\n| `permissions` | 权限结构见下表。 |  |\n\n### 权限设置\n\n| **键** | **描述** | **示例** |\n| --- | --- | --- |\n| `allow` | 允许工具使用的[**权限规则**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#configuring-permissions)数组 | `[ \"Bash(git diff:*)\" ]` |\n| `deny` | 拒绝工具使用的[**权限规则**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#configuring-permissions)数组 | `[ \"WebFetch\", \"Bash(curl:*)\" ]` |\n| `additionalDirectories` | Claude 可以访问的额外[**工作目录**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#working-directories) | `[ \"../docs/\" ]` |\n| `defaultMode` | 打开 Claude Code 时的默认[**权限模式**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#permission-modes) | `\"allowEdits\"` |\n| `disableBypassPermissionsMode` | 设置为 `\"disable\"` 以防止激活 `bypassPermissions` 模式。参见[**管理策略设置**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#enterprise-managed-policy-settings) | `\"disable\"` |\n\n### 设置优先级\n\n设置按优先级顺序应用：\n\n1.  企业策略（参见 [**IAM 文档**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#enterprise-managed-policy-settings)）\n    \n2.  命令行参数\n    \n3.  本地项目设置\n    \n4.  共享项目设置\n    \n5.  用户设置\n    \n\n## 环境变量\n\nClaude Code 支持以下环境变量来控制其行为：\n\n所有环境变量也可以在 [`**settings.json**`](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#available-settings) 中配置。这作为为每个会话自动设置环境变量的方式很有用，或者为整个团队或组织推出一组环境变量。\n\n| **变量** | **目的** |\n| --- | --- |\n| `ANTHROPIC_API_KEY` | 作为 `X-Api-Key` 头发送的 API 密钥，通常用于 Claude SDK（对于交互式使用，运行 `/login`） |\n| `ANTHROPIC_AUTH_TOKEN` | `Authorization` 和 `Proxy-Authorization` 头的自定义值（您在此处设置的值将以 `Bearer` 为前缀） |\n| `ANTHROPIC_CUSTOM_HEADERS` | 您想要添加到请求中的自定义头（以 `Name: Value` 格式） |\n| `ANTHROPIC_MODEL` | 要使用的自定义模型名称（参见[**模型配置**](https://docs.anthropic.com/zh-CN/docs/claude-code/bedrock-vertex-proxies#model-configuration)） |\n| `ANTHROPIC_SMALL_FAST_MODEL` | 用于后台任务的 [**Haiku 类模型**](https://docs.anthropic.com/zh-CN/docs/claude-code/costs)名称 |\n| `BASH_DEFAULT_TIMEOUT_MS` | 长时间运行的 bash 命令的默认超时时间 |\n| `BASH_MAX_TIMEOUT_MS` | 模型可以为长时间运行的 bash 命令设置的最大超时时间 |\n| `BASH_MAX_OUTPUT_LENGTH` | bash 输出在中间截断之前的最大字符数 |\n| `CLAUDE_BASH_MAINTAIN_PROJECT_WORKING_DIR` | 在每个 Bash 命令后返回到原始工作目录 |\n| `CLAUDE_CODE_API_KEY_HELPER_TTL_MS` | 凭据应刷新的间隔时间（以毫秒为单位）（使用 `apiKeyHelper` 时） |\n| `CLAUDE_CODE_MAX_OUTPUT_TOKENS` | 为大多数请求设置最大输出令牌数 |\n| `CLAUDE_CODE_USE_BEDROCK` | 使用 Bedrock（参见 [**Bedrock & Vertex**](https://docs.anthropic.com/zh-CN/docs/claude-code/bedrock-vertex-proxies)） |\n| `CLAUDE_CODE_USE_VERTEX` | 使用 Vertex（参见 [**Bedrock & Vertex**](https://docs.anthropic.com/zh-CN/docs/claude-code/bedrock-vertex-proxies)） |\n| `CLAUDE_CODE_SKIP_BEDROCK_AUTH` | 跳过 Bedrock 的 AWS 认证（例如使用 LLM 网关时） |\n| `CLAUDE_CODE_SKIP_VERTEX_AUTH` | 跳过 Vertex 的 Google 认证（例如使用 LLM 网关时） |\n| `CLAUDE_CODE_DISABLE_NONESSENTIAL_TRAFFIC` | 等同于设置 `DISABLE_AUTOUPDATER`、`DISABLE_BUG_COMMAND`、`DISABLE_ERROR_REPORTING` 和 `DISABLE_TELEMETRY` |\n| `DISABLE_AUTOUPDATER` | 设置为 `1` 以禁用自动更新器 |\n| `DISABLE_BUG_COMMAND` | 设置为 `1` 以禁用 `/bug` 命令 |\n| `DISABLE_COST_WARNINGS` | 设置为 `1` 以禁用成本警告消息 |\n| `DISABLE_ERROR_REPORTING` | 设置为 `1` 以选择退出 Sentry 错误报告 |\n| `DISABLE_NON_ESSENTIAL_MODEL_CALLS` | 设置为 `1` 以禁用非关键路径的模型调用，如风味文本 |\n| `DISABLE_TELEMETRY` | 设置为 `1` 以选择退出 Statsig 遥测（注意 Statsig 事件不包括用户数据，如代码、文件路径或 bash 命令） |\n| `HTTP_PROXY` | 为网络连接指定 HTTP 代理服务器 |\n| `HTTPS_PROXY` | 为网络连接指定 HTTPS 代理服务器 |\n| `MAX_THINKING_TOKENS` | 为模型预算强制思考 |\n| `MCP_TIMEOUT` | MCP 服务器启动的超时时间（以毫秒为单位） |\n| `MCP_TOOL_TIMEOUT` | MCP 工具执行的超时时间（以毫秒为单位） |\n| `MAX_MCP_OUTPUT_TOKENS` | MCP 工具响应中允许的最大令牌数（默认：25000） |\n\n## 配置选项\n\n我们正在将全局配置迁移到 `settings.json`。\n\n`claude config` 将被弃用，取而代之的是 [**settings.json**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#settings-files)\n\n要管理您的配置，请使用以下命令：\n\n*   列出设置：`claude config list`\n    \n*   查看设置：`claude config get <key>`\n    \n*   更改设置：`claude config set <key> <value>`\n    \n*   推送到设置（对于列表）：`claude config add <key> <value>`\n    \n*   从设置中移除（对于列表）：`claude config remove <key> <value>`\n    \n\n默认情况下，`config` 更改您的项目配置。要管理您的全局配置，请使用 `--global`（或 `-g`）标志。\n\n### 全局配置\n\n要设置全局配置，请使用 `claude config set -g <key> <value>`：\n\n| **键** | **描述** | **示例** |\n| --- | --- | --- |\n| `autoUpdates` | 是否启用自动更新（默认：`true`） | `false` |\n| `preferredNotifChannel` | 您希望接收通知的位置（默认：`iterm2`） | `iterm2`、`iterm2_with_bell`、`terminal_bell` 或 `notifications_disabled` |\n| `theme` | 颜色主题 | `dark`、`light`、`light-daltonized` 或 `dark-daltonized` |\n| `verbose` | 是否显示完整的 bash 和命令输出（默认：`false`） | `true` |\n\n## Claude 可用的工具\n\nClaude Code 可以访问一组强大的工具，帮助它理解和修改您的代码库：\n\n| **工具** | **描述** | **需要权限** |\n| --- | --- | --- |\n| **Agent** | 运行子代理来处理复杂的多步骤任务 | 否 |\n| **Bash** | 在您的环境中执行 shell 命令 | 是 |\n| **Edit** | 对特定文件进行有针对性的编辑 | 是 |\n| **Glob** | 基于模式匹配查找文件 | 否 |\n| **Grep** | 在文件内容中搜索模式 | 否 |\n| **LS** | 列出文件和目录 | 否 |\n| **MultiEdit** | 对单个文件原子性地执行多个编辑 | 是 |\n| **NotebookEdit** | 修改 Jupyter notebook 单元格 | 是 |\n| **NotebookRead** | 读取和显示 Jupyter notebook 内容 | 否 |\n| **Read** | 读取文件内容 | 否 |\n| **TodoRead** | 读取当前会话的任务列表 | 否 |\n| **TodoWrite** | 创建和管理结构化任务列表 | 否 |\n| **WebFetch** | 从指定 URL 获取内容 | 是 |\n| **WebSearch** | 执行带域名过滤的网络搜索 | 是 |\n| **Write** | 创建或覆盖文件 | 是 |\n\n权限规则可以使用 `/allowed-tools` 或在[**权限设置**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings#available-settings)中配置。\n\n### 使用钩子扩展工具\n\n您可以使用 [**Claude Code 钩子**](https://docs.anthropic.com/zh-CN/docs/claude-code/hooks)在任何工具执行之前或之后运行自定义命令。\n\n例如，您可以在 Claude 修改 Python 文件后自动运行 Python 格式化程序，或者通过阻止对某些路径的写入操作来防止修改生产配置文件。\n\n## 另请参阅\n\n*   [**身份和访问管理**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#configuring-permissions) - 了解 Claude Code 的权限系统\n    \n*   [**IAM 和访问控制**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#enterprise-managed-policy-settings) - 企业策略管理\n    \n*   [**故障排除**](https://docs.anthropic.com/zh-CN/docs/claude-code/troubleshooting#auto-updater-issues) - 常见配置问题的解决方案\n    \n\n# 将 Claude Code 添加到您的 IDE\n\n了解如何将 Claude Code 添加到您喜爱的 IDE\n\nClaude Code 与流行的集成开发环境 (IDE) 无缝集成，以增强您的编码工作流程。这种集成允许您直接在您首选的开发环境中利用 Claude 的功能。\n\n## 支持的 IDE\n\nClaude Code 目前支持两个主要的 IDE 系列：\n\n*   **Visual Studio Code**（包括 Cursor 和 Windsurf 等流行分支）\n    \n*   **JetBrains IDEs**（包括 PyCharm、WebStorm、IntelliJ 和 GoLand）\n    \n\n## 功能\n\n*   **快速启动**：使用 `Cmd+Esc`（Mac）或 `Ctrl+Esc`（Windows/Linux）直接从编辑器打开 Claude Code，或点击 UI 中的 Claude Code 按钮\n    \n*   **差异查看**：代码更改可以直接在 IDE 差异查看器中显示，而不是在终端中。您可以在 `/config` 中配置此功能\n    \n*   **选择上下文**：IDE 中的当前选择/标签页会自动与 Claude Code 共享\n    \n*   **文件引用快捷键**：使用 `Cmd+Option+K`（Mac）或 `Alt+Ctrl+K`（Linux/Windows）插入文件引用（例如，@File#L1-99）\n    \n*   **诊断共享**：IDE 中的诊断错误（lint、语法等）会在您工作时自动与 Claude 共享\n    \n\n## 安装\n\n### VS Code\n\n1.  打开 VSCode\n    \n2.  打开集成终端\n    \n3.  运行 `claude` - 扩展将自动安装\n    \n\n今后您也可以在任何外部终端中使用 `/ide` 命令连接到 IDE。\n\n这些安装说明也适用于 VS Code 分支，如 Cursor 和 Windsurf。\n\n### JetBrains IDEs\n\n从市场安装 [**Claude Code 插件**](https://docs.anthropic.com/s/claude-code-jetbrains) 并重启您的 IDE。\n\n当您在集成终端中运行 `claude` 时，插件也可能会自动安装。必须完全重启 IDE 才能生效。\n\n**远程开发限制**：使用 JetBrains 远程开发时，您必须通过 `Settings > Plugin (Host)` 在远程主机中安装插件。\n\n## 配置\n\n两种集成都与 Claude Code 的配置系统兼容。要启用 IDE 特定功能：\n\n1.  通过在内置终端中运行 `claude` 将 Claude Code 连接到您的 IDE\n    \n2.  运行 `/config` 命令\n    \n3.  将差异工具设置为 `auto` 以进行自动 IDE 检测\n    \n4.  Claude Code 将根据您的 IDE 自动使用适当的查看器\n    \n\n如果您使用外部终端（而不是 IDE 的内置终端），您仍然可以在启动 Claude Code 后使用 `/ide` 命令连接到您的 IDE。这允许您即使从单独的终端应用程序运行 Claude 时也能受益于 IDE 集成功能。这适用于 VS Code 和 JetBrains IDEs。\n\n使用外部终端时，为确保 Claude 默认访问与您的 IDE 相同的文件，请从与您的 IDE 项目根目录相同的目录启动 Claude。\n\n## 故障排除\n\n### VS Code 扩展未安装\n\n*   确保您从 VS Code 的集成终端运行 Claude Code\n    \n*   确保安装了与您的 IDE 对应的 CLI：\n    \n    *   对于 VS Code：`code` 命令应该可用\n        \n    *   对于 Cursor：`cursor` 命令应该可用\n        \n    *   对于 Windsurf：`windsurf` 命令应该可用\n        \n    *   如果未安装，使用 `Cmd+Shift+P`（Mac）或 `Ctrl+Shift+P`（Windows/Linux）并搜索”Shell Command: Install ‘code’ command in PATH”（或您的 IDE 的等效命令）\n    \n*   检查 VS Code 是否有安装扩展的权限\n    \n\n### JetBrains 插件不工作\n\n*   确保您从项目根目录运行 Claude Code\n    \n*   检查 JetBrains 插件是否在 IDE 设置中启用\n    \n*   完全重启 IDE。您可能需要多次执行此操作\n    \n*   对于 JetBrains 远程开发，确保 Claude Code 插件安装在远程主机中，而不是本地客户端上\n    \n\n如需更多帮助，请参考我们的[**故障排除指南**](https://docs.anthropic.com/zh-CN/docs/claude-code/troubleshooting)或联系支持。\n\n# 优化您的终端设置\n\nClaude Code在终端正确配置时效果最佳。遵循这些指南来优化您的体验。\n\n### 主题和外观\n\nClaude无法控制您终端的主题。这由您的终端应用程序处理。您可以随时通过`/config`命令将Claude Code的主题与您的终端匹配。\n\n### 换行\n\n您有几种选项可以在Claude Code中输入换行符：\n\n*   **快速转义**：输入`\\`然后按Enter键创建新行\n    \n*   **键盘快捷键**：设置键绑定来插入新行\n    \n\n#### 设置Shift+Enter（VS Code或iTerm2）：\n\n在Claude Code中运行`/terminal-setup`来自动配置Shift+Enter。\n\n#### 设置Option+Enter（VS Code、iTerm2或macOS Terminal.app）：\n\n**对于Mac Terminal.app：**\n\n1.  打开设置 → 配置文件 → 键盘\n    \n2.  勾选”使用Option作为Meta键”\n    \n\n**对于iTerm2和VS Code终端：**\n\n1.  打开设置 → 配置文件 → 键\n    \n2.  在常规下，将左/右Option键设置为”Esc+“\n    \n\n### 通知设置\n\n通过正确的通知配置，永远不会错过Claude完成任务的时机：\n\n#### 终端铃声通知\n\n在任务完成时启用声音警报：\n\n```sh\nclaude config set --global preferredNotifChannel terminal_bell\n\n```\n\n**对于macOS用户**：不要忘记在系统设置 → 通知 → \\[您的终端应用\\]中启用通知权限。\n\n#### iTerm 2系统通知\n\n对于iTerm 2在任务完成时的警报：\n\n1.  打开iTerm 2偏好设置\n    \n2.  导航到配置文件 → 终端\n    \n3.  启用”静音铃声”和过滤警报 → “发送转义序列生成的警报”\n    \n4.  设置您偏好的通知延迟\n    \n\n请注意，这些通知特定于iTerm 2，在默认的macOS终端中不可用。\n\n#### 自定义通知钩子\n\n对于高级通知处理，您可以创建[**通知钩子**](https://docs.anthropic.com/zh-CN/docs/claude-code/hooks#notification)来运行您自己的逻辑。\n\n### 处理大型输入\n\n在处理大量代码或长指令时：\n\n*   **避免直接粘贴**：Claude Code可能难以处理非常长的粘贴内容\n    \n*   **使用基于文件的工作流程**：将内容写入文件并要求Claude读取它\n    \n*   **注意VS Code限制**：VS Code终端特别容易截断长粘贴\n    \n\n### Vim模式\n\nClaude Code支持Vim键绑定的子集，可以通过`/vim`启用或通过`/config`配置。\n\n支持的子集包括：\n\n*   模式切换：`Esc`（到NORMAL），`i`/`I`，`a`/`A`，`o`/`O`（到INSERT）\n    \n*   导航：`h`/`j`/`k`/`l`，`w`/`e`/`b`，`0`/`$`/`^`，`gg`/`G`\n    \n*   编辑：`x`，`dw`/`de`/`db`/`dd`/`D`，`cw`/`ce`/`cb`/`cc`/`C`，`.`（重复）\n    \n\n# 管理 Claude 的内存\n\n了解如何使用不同的内存位置和最佳实践来管理 Claude Code 跨会话的内存。\n\nClaude Code 可以跨会话记住您的偏好设置，比如样式指南和工作流程中的常用命令。\n\n## 确定内存类型\n\nClaude Code 提供三种内存位置，每种都有不同的用途：\n\n| **内存类型** | **位置** | **用途** | **使用案例示例** |\n| --- | --- | --- | --- |\n| **项目内存** | `./CLAUDE.md` | 项目的团队共享指令 | 项目架构、编码标准、常见工作流程 |\n| **用户内存** | `~/.claude/CLAUDE.md` | 所有项目的个人偏好设置 | 代码样式偏好、个人工具快捷方式 |\n| **项目内存（本地）** | `./CLAUDE.local.md` | 个人项目特定偏好设置 | _（已弃用，见下文）_ 您的沙盒 URL、首选测试数据 |\n\n所有内存文件在启动 Claude Code 时都会自动加载到上下文中。\n\n## CLAUDE.md 导入\n\nCLAUDE.md 文件可以使用 `@path/to/import` 语法导入其他文件。以下示例导入了 3 个文件：\n\n```shell\n查看 @README 了解项目概述，查看 @package.json 了解此项目可用的 npm 命令。\n\n# 附加说明\n- git 工作流程 @docs/git-instructions.md\n```\n\n相对路径和绝对路径都是允许的。特别是，导入用户主目录中的文件是让团队成员提供不会检入存储库的个人指令的便捷方式。以前 CLAUDE.local.md 有类似的用途，但现在已弃用，改用导入功能，因为它们在多个 git 工作树中工作得更好。\n\n```shell\n# 个人偏好设置\n- @~/.claude/my-project-instructions.md\n```\n\n为了避免潜在的冲突，导入不会在 markdown 代码段和代码块内进行评估。\n\n```shell\n此代码段不会被视为导入：`@anthropic-ai/claude-code`\n```\n\n导入的文件可以递归导入其他文件，最大深度为 5 跳。您可以通过运行 `/memory` 命令查看加载了哪些内存文件。\n\n## Claude 如何查找内存\n\nClaude Code 递归读取内存：从当前工作目录开始，Claude Code 向上递归到（但不包括）根目录 _/_ 并读取它找到的任何 CLAUDE.md 或 CLAUDE.local.md 文件。这在大型存储库中工作时特别方便，您在 _foo/bar/_ 中运行 Claude Code，并且在 _foo/CLAUDE.md_ 和 _foo/bar/CLAUDE.md_ 中都有内存。\n\nClaude 还会发现嵌套在当前工作目录下子树中的 CLAUDE.md。它们不会在启动时加载，只有当 Claude 读取这些子树中的文件时才会包含。\n\n## 使用 \n\n## `**#**` 快捷方式快速添加内存\n\n添加内存的最快方法是在输入开头使用 `#` 字符：\n\n```shell\n# 始终使用描述性变量名\n```\n\n系统会提示您选择要将此内容存储在哪个内存文件中。\n\n## 使用 \n\n## `**/memory**` 直接编辑内存\n\n在会话期间使用 `/memory` 斜杠命令在系统编辑器中打开任何内存文件，以进行更广泛的添加或组织。\n\n## 设置项目内存\n\n假设您想要设置一个 CLAUDE.md 文件来存储重要的项目信息、约定和常用命令。\n\n使用以下命令为您的代码库引导一个 CLAUDE.md：\n\n```shell\n> /init\n```\n\n提示：\n\n*   包含常用命令（构建、测试、代码检查）以避免重复搜索\n    \n*   记录代码样式偏好和命名约定\n    \n*   添加项目特定的重要架构模式\n    \n*   CLAUDE.md 内存可用于与团队共享的指令和您的个人偏好设置。\n    \n\n## 内存最佳实践\n\n*   **要具体**：“使用 2 空格缩进”比”正确格式化代码”更好。\n    \n*   **使用结构来组织**：将每个单独的内存格式化为项目符号，并在描述性 markdown 标题下对相关内存进行分组。\n    \n*   **定期审查**：随着项目的发展更新内存，以确保 Claude 始终使用最新的信息和上下文。\n    \n\n# CLI 参考\n\nClaude Code 命令行界面的完整参考，包括命令和标志。\n\n## CLI 命令\n\n| **命令** | **描述** | **示例** |\n| --- | --- | --- |\n| `claude` | 启动交互式 REPL | `claude` |\n| `claude \"query\"` | 使用初始提示启动 REPL | `claude \"explain this project\"` |\n| `claude -p \"query\"` | 通过 SDK 查询，然后退出 | `claude -p \"explain this function\"` |\n| `cat file \\| claude -p \"query\"` | 处理管道内容 | `cat logs.txt \\| claude -p \"explain\"` |\n| `claude -c` | 继续最近的对话 | `claude -c` |\n| `claude -c -p \"query\"` | 通过 SDK 继续 | `claude -c -p \"Check for type errors\"` |\n| `claude -r \"<session-id>\" \"query\"` | 通过 ID 恢复会话 | `claude -r \"abc123\" \"Finish this PR\"` |\n| `claude update` | 更新到最新版本 | `claude update` |\n| `claude mcp` | 配置模型上下文协议 (MCP) 服务器 | 请参阅 [**Claude Code MCP 文档**](https://docs.anthropic.com/zh-CN/docs/claude-code/mcp)。 |\n\n## CLI 标志\n\n使用这些命令行标志自定义 Claude Code 的行为：\n\n| **标志** | **描述** | **示例** |\n| --- | --- | --- |\n| `--add-dir` | 添加额外的工作目录供 Claude 访问（验证每个路径是否作为目录存在） | `claude --add-dir ../apps ../lib` |\n| `--allowedTools` | 除了 [**settings.json 文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings) 之外，应该在不提示用户许可的情况下允许的工具列表 | `\"Bash(git log:*)\" \"Bash(git diff:*)\" \"Read\"` |\n| `--disallowedTools` | 除了 [**settings.json 文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings) 之外，应该在不提示用户许可的情况下禁止的工具列表 | `\"Bash(git log:*)\" \"Bash(git diff:*)\" \"Edit\"` |\n| `--print`, `-p` | 打印响应而不使用交互模式（有关编程使用详细信息，请参阅 [**SDK 文档**](https://docs.anthropic.com/zh-CN/docs/claude-code/sdk)） | `claude -p \"query\"` |\n| `--output-format` | 指定打印模式的输出格式（选项：`text`、`json`、`stream-json`） | `claude -p \"query\" --output-format json` |\n| `--input-format` | 指定打印模式的输入格式（选项：`text`、`stream-json`） | `claude -p --output-format json --input-format stream-json` |\n| `--verbose` | 启用详细日志记录，显示完整的逐轮输出（在打印和交互模式下都有助于调试） | `claude --verbose` |\n| `--max-turns` | 限制非交互模式下的代理轮数 | `claude -p --max-turns 3 \"query\"` |\n| `--model` | 使用最新模型的别名（`sonnet` 或 `opus`）或模型的全名为当前会话设置模型 | `claude --model claude-sonnet-4-20250514` |\n| `--permission-mode` | 在指定的 [**权限模式**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#permission-modes) 下开始 | `claude --permission-mode plan` |\n| `--permission-prompt-tool` | 指定一个 MCP 工具来处理非交互模式下的权限提示 | `claude -p --permission-prompt-tool mcp_auth_tool \"query\"` |\n| `--resume` | 通过 ID 恢复特定会话，或在交互模式下选择 | `claude --resume abc123 \"query\"` |\n| `--continue` | 在当前目录中加载最近的对话 | `claude --continue` |\n| `--dangerously-skip-permissions` | 跳过权限提示（谨慎使用） | `claude --dangerously-skip-permissions` |\n\n`--output-format json` 标志对于脚本编写和自动化特别有用，允许您以编程方式解析 Claude 的响应。\n\n有关打印模式（`-p`）的详细信息，包括输出格式、流式传输、详细日志记录和编程使用，请参阅 [**SDK 文档**](https://docs.anthropic.com/zh-CN/docs/claude-code/sdk)。\n\n# 交互模式\n\nClaude Code 会话中键盘快捷键、输入模式和交互功能的完整参考。\n\n## 键盘快捷键\n\n### 通用控制\n\n| **快捷键** | **描述** | **上下文** |\n| --- | --- | --- |\n| `Ctrl+C` | 取消当前输入或生成 | 标准中断 |\n| `Ctrl+D` | 退出 Claude Code 会话 | EOF 信号 |\n| `Ctrl+L` | 清除终端屏幕 | 保留对话历史 |\n| `上/下箭头` | 导航命令历史 | 回调之前的输入 |\n| `Esc` + `Esc` | 编辑上一条消息 | 双击 Escape 键修改 |\n\n### 多行输入\n\n| **方法** | **快捷键** | **上下文** |\n| --- | --- | --- |\n| 快速转义 | `\\` + `Enter` | 在所有终端中工作 |\n| macOS 默认 | `Option+Enter` | macOS 上的默认设置 |\n| 终端设置 | `Shift+Enter` | 在 `/terminal-setup` 之后 |\n| 粘贴模式 | 直接粘贴 | 用于代码块、日志 |\n\n### 快速命令\n\n| **快捷键** | **描述** | **注释** |\n| --- | --- | --- |\n| 开头的 `#` | 内存快捷键 - 添加到 CLAUDE.md | 提示文件选择 |\n| 开头的 `/` | 斜杠命令 | 参见 [**斜杠命令**](https://docs.anthropic.com/zh-CN/docs/claude-code/slash-commands) |\n\n## Vim 模式\n\n使用 `/vim` 命令启用 vim 风格编辑，或通过 `/config` 永久配置。\n\n### 模式切换\n\n| **命令** | **动作** | **从模式** |\n| --- | --- | --- |\n| `Esc` | 进入 NORMAL 模式 | INSERT |\n| `i` | 在光标前插入 | NORMAL |\n| `I` | 在行首插入 | NORMAL |\n| `a` | 在光标后插入 | NORMAL |\n| `A` | 在行尾插入 | NORMAL |\n| `o` | 在下方打开新行 | NORMAL |\n| `O` | 在上方打开新行 | NORMAL |\n\n### 导航（NORMAL 模式）\n\n| **命令** | **动作** |\n| --- | --- |\n| `h`/`j`/`k`/`l` | 向左/下/上/右移动 |\n| `w` | 下一个单词 |\n| `e` | 单词末尾 |\n| `b` | 上一个单词 |\n| `0` | 行首 |\n| `$` | 行尾 |\n| `^` | 第一个非空白字符 |\n| `gg` | 输入开头 |\n| `G` | 输入结尾 |\n\n### 编辑（NORMAL 模式）\n\n| **命令** | **动作** |\n| --- | --- |\n| `x` | 删除字符 |\n| `dd` | 删除行 |\n| `D` | 删除到行尾 |\n| `dw`/`de`/`db` | 删除单词/到末尾/向后 |\n| `cc` | 更改行 |\n| `C` | 更改到行尾 |\n| `cw`/`ce`/`cb` | 更改单词/到末尾/向后 |\n| `.` | 重复上次更改 |\n\n在终端设置中配置您首选的换行行为。运行 `/terminal-setup` 为 iTerm2 和 VSCode 终端安装 Shift+Enter 绑定。\n\n## 命令历史\n\nClaude Code 为当前会话维护命令历史：\n\n*   历史按工作目录存储\n    \n*   使用 `/clear` 命令清除\n    \n*   使用上/下箭头导航（参见上面的键盘快捷键）\n    \n*   **Ctrl+R**：反向搜索历史（如果终端支持）\n    \n*   **注意**：历史扩展（`!`）默认禁用\n    \n\n# 斜杠命令\n\n在交互式会话中使用斜杠命令控制 Claude 的行为。\n\n## 内置斜杠命令\n\n| **命令** | **用途** |\n| --- | --- |\n| `/add-dir` | 添加额外的工作目录 |\n| `/bug` | 报告错误（将对话发送给 Anthropic） |\n| `/clear` | 清除对话历史 |\n| `/compact [instructions]` | 压缩对话，可选择性地提供重点指令 |\n| `/config` | 查看/修改配置 |\n| `/cost` | 显示令牌使用统计 |\n| `/doctor` | 检查您的 Claude Code 安装的健康状况 |\n| `/help` | 获取使用帮助 |\n| `/init` | 使用 CLAUDE.md 指南初始化项目 |\n| `/login` | 切换 Anthropic 账户 |\n| `/logout` | 从您的 Anthropic 账户登出 |\n| `/mcp` | 管理 MCP 服务器连接和 OAuth 身份验证 |\n| `/memory` | 编辑 CLAUDE.md 内存文件 |\n| `/model` | 选择或更改 AI 模型 |\n| `/permissions` | 查看或更新[**权限**](https://docs.anthropic.com/zh-CN/docs/claude-code/iam#configuring-permissions) |\n| `/pr_comments` | 查看拉取请求评论 |\n| `/review` | 请求代码审查 |\n| `/status` | 查看账户和系统状态 |\n| `/terminal-setup` | 安装 Shift+Enter 键绑定用于换行（仅限 iTerm2 和 VSCode） |\n| `/vim` | 进入 vim 模式，在插入和命令模式之间切换 |\n\n# 钩子\n\n通过注册shell命令来自定义和扩展Claude Code的行为\n\n# 介绍\n\nClaude Code钩子是用户定义的shell命令，在Claude Code生命周期的各个点执行。钩子提供对Claude Code行为的确定性控制，确保某些操作总是发生，而不是依赖LLM选择运行它们。\n\n示例用例包括：\n\n*   **通知**：自定义当Claude Code等待您的输入或运行某些内容的权限时如何获得通知。\n    \n*   **自动格式化**：在每次文件编辑后对.ts文件运行`prettier`，对.go文件运行`gofmt`等。\n    \n*   **日志记录**：跟踪和计算所有执行的命令以用于合规性或调试。\n    \n*   **反馈**：当Claude Code产生不遵循您的代码库约定的代码时提供自动反馈。\n    \n*   **自定义权限**：阻止对生产文件或敏感目录的修改。\n    \n\n通过将这些规则编码为钩子而不是提示指令，您将建议转换为每次预期运行时都会执行的应用程序级代码。\n\n钩子在没有确认的情况下以您的完整用户权限执行shell命令。您有责任确保您的钩子是安全可靠的。Anthropic不对因钩子使用而导致的任何数据丢失或系统损坏承担责任。请查看[**安全考虑**](https://docs.anthropic.com/zh-CN/docs/claude-code/hooks#security-considerations)。\n\n## 快速开始\n\n在这个快速开始中，您将添加一个钩子来记录Claude Code运行的shell命令。\n\n快速开始先决条件：安装`jq`用于命令行中的JSON处理。\n\n### 步骤1：打开钩子配置\n\n运行`/hooks` [**斜杠命令**](https://docs.anthropic.com/zh-CN/docs/claude-code/slash-commands)并选择`PreToolUse`钩子事件。\n\n`PreToolUse`钩子在工具调用之前运行，可以阻止它们同时向Claude提供关于如何做不同事情的反馈。\n\n### 步骤2：添加匹配器\n\n选择`+ Add new matcher…`仅在Bash工具调用上运行您的钩子。\n\n为匹配器输入`Bash`。\n\n### 步骤3：添加钩子\n\n选择`+ Add new hook…`并输入此命令：\n\n```bash\njq -r '\"\\(.tool_input.command) - \\(.tool_input.description // \"No description\")\"' >> ~/.claude/bash-command-log.txt\n\n```\n\n### 步骤4：保存您的配置\n\n对于存储位置，选择`User settings`，因为您要记录到您的主目录。然后此钩子将应用于所有项目，而不仅仅是您当前的项目。\n\n然后按Esc直到返回到REPL。您的钩子现在已注册！\n\n### 步骤5：验证您的钩子\n\n再次运行`/hooks`或检查`~/.claude/settings.json`以查看您的配置：\n\n```json\n\"hooks\": {\n  \"PreToolUse\": [\n    {\n      \"matcher\": \"Bash\",\n      \"hooks\": [\n        {\n          \"type\": \"command\",\n          \"command\": \"jq -r '\\\"\\(.tool_input.command) - \\(.tool_input.description // \\\"No description\\\")\\\"' >> ~/.claude/bash-command-log.txt\"\n        }\n      ]\n    }\n  ]\n}\n\n```\n\n## 配置\n\nClaude Code钩子在您的[**设置文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings)中配置：\n\n*   `~/.claude/settings.json` - 用户设置\n    \n*   `.claude/settings.json` - 项目设置\n    \n*   `.claude/settings.local.json` - 本地项目设置（不提交）\n    \n*   企业管理策略设置\n    \n\n### 结构\n\n钩子按匹配器组织，其中每个匹配器可以有多个钩子：\n\n```json\n{\n  \"hooks\": {\n    \"EventName\": [\n      {\n        \"matcher\": \"ToolPattern\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"your-command-here\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\n*   **matcher**：匹配工具名称的模式（仅适用于\n    \n\n`PreToolUse`和`PostToolUse`）\n\n*   简单字符串精确匹配：`Write`仅匹配Write工具\n    \n*   支持正则表达式：`Edit|Write`或`Notebook.*`\n    \n*   如果省略或为空字符串，钩子对所有匹配事件运行\n    \n*   **hooks**：当模式匹配时要执行的命令数组\n    \n*   `type`：目前仅支持`\"command\"`\n    \n*   `command`：要执行的bash命令\n    \n*   `timeout`：（可选）命令应该运行多长时间（以秒为单位），然后取消所有正在进行的钩子。\n    \n\n## 钩子事件\n\n### PreToolUse\n\n在Claude创建工具参数之后和处理工具调用之前运行。\n\n**常见匹配器：**\n\n*   `Task` - 代理任务\n    \n*   `Bash` - Shell命令\n    \n*   `Glob` - 文件模式匹配\n    \n*   `Grep` - 内容搜索\n    \n*   `Read` - 文件读取\n    \n*   `Edit`, `MultiEdit` - 文件编辑\n    \n*   `Write` - 文件写入\n    \n*   `WebFetch`, `WebSearch` - Web操作\n    \n\n### PostToolUse\n\n在工具成功完成后立即运行。\n\n识别与PreToolUse相同的匹配器值。\n\n### Notification\n\n当Claude Code发送通知时运行。\n\n### Stop\n\n当主Claude Code代理完成响应时运行。\n\n### SubagentStop\n\n当Claude Code子代理（Task工具调用）完成响应时运行。\n\n## 钩子输入\n\n钩子通过stdin接收包含会话信息和事件特定数据的JSON数据：\n\n```typescript\n{\n  // 通用字段\n  session_id: string\n  transcript_path: string  // 对话JSON的路径\n\n  // 事件特定字段\n  ...\n}\n\n```\n\n### PreToolUse输入\n\n`tool_input`的确切模式取决于工具。\n\n```json\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"tool_name\": \"Write\",\n  \"tool_input\": {\n    \"file_path\": \"/path/to/file.txt\",\n    \"content\": \"file content\"\n  }\n}\n\n```\n\n### PostToolUse输入\n\n`tool_input`和`tool_response`的确切模式取决于工具。\n\n```json\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"tool_name\": \"Write\",\n  \"tool_input\": {\n    \"file_path\": \"/path/to/file.txt\",\n    \"content\": \"file content\"\n  },\n  \"tool_response\": {\n    \"filePath\": \"/path/to/file.txt\",\n    \"success\": true\n  }\n}\n\n```\n\n### Notification输入\n\n```json\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"message\": \"Task completed successfully\",\n  \"title\": \"Claude Code\"\n}\n\n```\n\n### Stop和SubagentStop输入\n\n当Claude Code已经由于停止钩子而继续时，`stop_hook_active`为true。检查此值或处理记录以防止Claude Code无限运行。\n\n```json\n{\n  \"session_id\": \"abc123\",\n  \"transcript_path\": \"~/.claude/projects/.../00893aaf-19fa-41d2-8238-13269b9b3ca0.jsonl\",\n  \"stop_hook_active\": true\n}\n\n```\n\n## 钩子输出\n\n钩子有两种方式将输出返回给Claude Code。输出传达是否阻止以及应该向Claude和用户显示的任何反馈。\n\n### 简单：退出代码\n\n钩子通过退出代码、stdout和stderr传达状态：\n\n*   **退出代码0**：成功。`stdout`在记录模式（CTRL-R）中显示给用户。\n    \n*   **退出代码2**：阻塞错误。`stderr`反馈给Claude自动处理。请参阅下面的每个钩子事件行为。\n    \n*   **其他退出代码**：非阻塞错误。`stderr`显示给用户，执行继续。\n    \n\n提醒：如果退出代码为0，Claude Code不会看到stdout。\n\n#### 退出代码2行为\n\n| **钩子事件** | **行为** |\n| --- | --- |\n| `PreToolUse` | 阻止工具调用，向Claude显示错误 |\n| `PostToolUse` | 向Claude显示错误（工具已运行） |\n| `Notification` | 不适用，仅向用户显示stderr |\n| `Stop` | 阻止停止，向Claude显示错误 |\n| `SubagentStop` | 阻止停止，向Claude子代理显示错误 |\n\n### 高级：JSON输出\n\n钩子可以在`stdout`中返回结构化JSON以获得更复杂的控制：\n\n#### 通用JSON字段\n\n所有钩子类型都可以包含这些可选字段：\n\n```json\n{\n  \"continue\": true, // Claude是否应该在钩子执行后继续（默认：true）\n  \"stopReason\": \"string\" // 当continue为false时显示的消息\n  \"suppressOutput\": true, // 在记录模式中隐藏stdout（默认：false）\n}\n\n```\n\n如果`continue`为false，Claude在钩子运行后停止处理。\n\n*   对于`PreToolUse`，这与`\"decision\": \"block\"`不同，后者仅阻止特定工具调用并向Claude提供自动反馈。\n    \n*   对于`PostToolUse`，这与`\"decision\": \"block\"`不同，后者向Claude提供自动反馈。\n    \n*   对于`Stop`和`SubagentStop`，这优先于任何`\"decision\": \"block\"`输出。\n    \n*   在所有情况下，`\"continue\" = false`优先于任何`\"decision\": \"block\"`输出。\n    \n\n`stopReason`伴随`continue`提供显示给用户的原因，不显示给Claude。\n\n#### `**PreToolUse**`决策控制\n\n`PreToolUse`钩子可以控制工具调用是否继续。\n\n*   “approve”绕过权限系统。`reason`显示给用户但不显示给Claude。\n    \n*   “block”阻止工具调用执行。`reason`显示给Claude。\n    \n*   `undefined`导致现有权限流程。`reason`被忽略。\n    \n\n```json\n{\n  \"decision\": \"approve\" | \"block\" | undefined,\n  \"reason\": \"Explanation for decision\"\n}\n\n```\n\n#### `**PostToolUse**`决策控制\n\n`PostToolUse`钩子可以控制工具调用是否继续。\n\n*   “block”自动用`reason`提示Claude。\n    \n*   `undefined`什么都不做。`reason`被忽略。\n    \n\n```json\n{\n  \"decision\": \"block\" | undefined,\n  \"reason\": \"Explanation for decision\"\n}\n\n```\n\n#### `**Stop**`/`**SubagentStop**`决策控制\n\n`Stop`和`SubagentStop`钩子可以控制Claude是否必须继续。\n\n*   “block”阻止Claude停止。您必须填充`reason`让Claude知道如何继续。\n    \n*   `undefined`允许Claude停止。`reason`被忽略。\n    \n\n```json\n{\n  \"decision\": \"block\" | undefined,\n  \"reason\": \"Must be provided when Claude is blocked from stopping\"\n}\n\n```\n\n#### JSON输出示例：Bash命令编辑\n\n```python\n#!/usr/bin/env python3\nimport json\nimport re\nimport sys\n\n# 将验证规则定义为（正则表达式模式，消息）元组列表\nVALIDATION_RULES = [\n    (\n        r\"\\bgrep\\b(?!.*\\|)\",\n        \"Use 'rg' (ripgrep) instead of 'grep' for better performance and features\",\n    ),\n    (\n        r\"\\bfind\\s+\\S+\\s+-name\\b\",\n        \"Use 'rg --files | rg pattern' or 'rg --files -g pattern' instead of 'find -name' for better performance\",\n    ),\n]\n\n\ndef validate_command(command: str) -> list[str]:\n    issues = []\n    for pattern, message in VALIDATION_RULES:\n        if re.search(pattern, command):\n            issues.append(message)\n    return issues\n\n\ntry:\n    input_data = json.load(sys.stdin)\nexcept json.JSONDecodeError as e:\n    print(f\"Error: Invalid JSON input: {e}\", file=sys.stderr)\n    sys.exit(1)\n\ntool_name = input_data.get(\"tool_name\", \"\")\ntool_input = input_data.get(\"tool_input\", {})\ncommand = tool_input.get(\"command\", \"\")\n\nif tool_name != \"Bash\" or not command:\n    sys.exit(1)\n\n# 验证命令\nissues = validate_command(command)\n\nif issues:\n    for message in issues:\n        print(f\"• {message}\", file=sys.stderr)\n    # 退出代码2阻止工具调用并向Claude显示stderr\n    sys.exit(2)\n\n```\n\n## 使用MCP工具\n\nClaude Code钩子与[**模型上下文协议（MCP）工具**](https://docs.anthropic.com/zh-CN/docs/claude-code/mcp)无缝协作。当MCP服务器提供工具时，它们以特殊的命名模式出现，您可以在钩子中匹配。\n\n### MCP工具命名\n\nMCP工具遵循模式`mcp__<server>__<tool>`，例如：\n\n*   `mcp__memory__create_entities` - 内存服务器的创建实体工具\n    \n*   `mcp__filesystem__read_file` - 文件系统服务器的读取文件工具\n    \n*   `mcp__github__search_repositories` - GitHub服务器的搜索工具\n    \n\n### 为MCP工具配置钩子\n\n您可以针对特定的MCP工具或整个MCP服务器：\n\n```json\n{\n  \"hooks\": {\n    \"PreToolUse\": [\n      {\n        \"matcher\": \"mcp__memory__.*\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"echo 'Memory operation initiated' >> ~/mcp-operations.log\"\n          }\n        ]\n      },\n      {\n        \"matcher\": \"mcp__.*__write.*\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"/home/user/scripts/validate-mcp-write.py\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\n## 示例\n\n### 代码格式化\n\n在文件修改后自动格式化代码：\n\n```json\n{\n  \"hooks\": {\n    \"PostToolUse\": [\n      {\n        \"matcher\": \"Write|Edit|MultiEdit\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"/home/user/scripts/format-code.sh\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\n### 通知\n\n自定义当Claude Code请求权限或提示输入变为空闲时发送的通知。\n\n```json\n{\n  \"hooks\": {\n    \"Notification\": [\n      {\n        \"matcher\": \"\",\n        \"hooks\": [\n          {\n            \"type\": \"command\",\n            \"command\": \"python3 ~/my_custom_notifier.py\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\n```\n\n## 安全考虑\n\n### 免责声明\n\n**使用风险自负**：Claude Code钩子在您的系统上自动执行任意shell命令。通过使用钩子，您承认：\n\n*   您对配置的命令完全负责\n    \n*   钩子可以修改、删除或访问您的用户帐户可以访问的任何文件\n    \n*   恶意或编写不当的钩子可能导致数据丢失或系统损坏\n    \n*   Anthropic不提供任何保证，并且不对因钩子使用而导致的任何损坏承担责任\n    \n*   您应该在生产使用之前在安全环境中彻底测试钩子\n    \n\n在将任何钩子命令添加到您的配置之前，请始终审查和理解它们。\n\n### 安全最佳实践\n\n以下是编写更安全钩子的一些关键实践：\n\n1.  **验证和清理输入** - 永远不要盲目信任输入数据\n    \n2.  **始终引用shell变量** - 使用`\"$VAR\"`而不是`$VAR`\n    \n3.  **阻止路径遍历** - 检查文件路径中的`..`\n    \n4.  **使用绝对路径** - 为脚本指定完整路径\n    \n5.  **跳过敏感文件** - 避免`.env`、`.git/`、密钥等。\n    \n\n### 配置安全\n\n对设置文件中钩子的直接编辑不会立即生效。Claude Code：\n\n1.  在启动时捕获钩子快照\n    \n2.  在整个会话中使用此快照\n    \n3.  如果钩子被外部修改则发出警告\n    \n4.  需要在`/hooks`菜单中审查更改才能应用\n    \n\n这防止恶意钩子修改影响您当前的会话。\n\n## 钩子执行详细信息\n\n*   **超时**：默认60秒执行限制，每个命令可配置。\n    \n    *   如果任何单个命令超时，所有正在进行的钩子都会被取消。\n    \n*   **并行化**：所有匹配的钩子并行运行\n    \n*   **环境**：在当前目录中使用Claude Code的环境运行\n    \n*   **输入**：通过stdin的JSON\n    \n*   **输出**：\n    \n    *   PreToolUse/PostToolUse/Stop：进度显示在记录中（Ctrl-R）\n        \n    *   Notification：仅记录到调试（`--debug`）\n        \n\n## 调试\n\n要排除钩子故障：\n\n1.  检查`/hooks`菜单是否显示您的配置\n    \n2.  验证您的[**设置文件**](https://docs.anthropic.com/zh-CN/docs/claude-code/settings)是有效的JSON\n    \n3.  手动测试命令\n    \n4.  检查退出代码\n    \n5.  审查stdout和stderr格式期望\n    \n6.  确保正确的引号转义\n    \n7.  使用`claude --debug`调试您的钩子。成功钩子的输出如下所示。\n    \n\n```plaintext\n[DEBUG] Executing hooks for PostToolUse:Write\n[DEBUG] Getting matching hook commands for PostToolUse with query: Write\n[DEBUG] Found 1 hook matchers in settings\n[DEBUG] Matched 1 hooks for query \"Write\"\n[DEBUG] Found 1 hook commands to execute\n[DEBUG] Executing hook command: <Your command> with timeout 60000ms\n[DEBUG] Hook command completed with status 0: <Your stdout>\n\n```\n\n进度消息出现在记录模式（Ctrl-R）中，显示：\n\n*   正在运行哪个钩子\n    \n*   正在执行的命令\n    \n*   成功/失败状态\n    \n*   输出或错误消息","tags":["Claude"],"categories":["编程"]},{"title":"Hello World","url":"/2013/12/24/hello-world/","content":"Welcome to [Hexo](http://zespia.tw/hexo)! This is your very first post. Check [documentation](http://zespia.tw/hexo/docs) to learn how to use.\n","tags":["test"],"categories":["Sports","Baseball"]}]